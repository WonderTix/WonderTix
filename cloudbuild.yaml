steps:

  # Build server image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-test-server'
    waitFor: ['-']
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        docker build -f server/Dockerfile \
        -t $${ARTIFACTS}/server-img-$${ENV}:${SHORT_SHA} \
        server
    secretEnv:
      - 'ARTIFACTS'
      - 'ENV'

  # Push server image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-test-server'
    waitFor: ['build-test-server']
    entrypoint: 'bash'
    args: ['-c', 'docker push $${ARTIFACTS}/server-img-$${ENV}:${SHORT_SHA}']
    secretEnv:
      - 'ARTIFACTS'
      - 'ENV'

  # Deploy server as test revision (no traffic)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-test-server'
    waitFor: ['push-test-server']
    entrypoint: 'bash'
    args: ['scripts/deploy/server.sh']
    env:
      - 'SHORT_SHA=${SHORT_SHA}'
      - 'TAG=test'
    secretEnv:
      - 'ARTIFACTS'
      - 'AUTH0_URL'
      - 'CLIENT_REVISION'
      - 'ENV'
      - 'REGION'
      - 'SERVER_CPU'
      - 'SERVER_MEMORY'
      - 'SERVER_REVISION'
      - 'SERVICE_ACCOUNT'
      - 'SQL_INSTANCE'

  # Build client image with build args for test revision
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-test-client'
    waitFor: ['-']
    entrypoint: 'bash'
    args: ['scripts/build/client.sh']
    env:
      - 'SHORT_SHA=${SHORT_SHA}'
    secretEnv:
      - 'ARTIFACTS'
      - 'AUTH0_CLIENT_ID'
      - 'AUTH0_CLIENT_SECRET'
      - 'AUTH0_URL'
      - 'ENV'
      - 'PUBLIC_STRIPE_KEY'
      - 'SERVER_REVISION'

  # Push client image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-test-client'
    waitFor: ['build-test-client']
    entrypoint: 'bash'
    args: ['-c', 'docker push $${ARTIFACTS}/client-img-$${ENV}:${SHORT_SHA}']
    secretEnv: 
      - 'ARTIFACTS'
      - 'ENV'

  # Deploy client as test revision (no traffic)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-test-client'
    waitFor: ['push-test-client', 'deploy-test-server']
    entrypoint: 'bash'
    args: ['scripts/deploy/client.sh']
    env:
      - 'SHORT_SHA=${SHORT_SHA}'
      - 'TAG=test'
    secretEnv:
      - 'ARTIFACTS'
      - 'CLIENT_CPU'
      - 'CLIENT_MEMORY'
      - 'ENV'
      - 'REGION'
      - 'SERVICE_ACCOUNT'

  # Run E2E tests on test client
  - name: 'mcr.microsoft.com/playwright:latest'
    id: 'run-tests'
    waitFor: ['deploy-test-client']
    entrypoint: 'bash'
    args: ['scripts/test/client.sh']
    secretEnv:
      - 'CLIENT_REVISION'
      - 'SERVER_REVISION'
      - 'TEST_EMAIL'
      - 'TEST_PASSWORD'

  # Deploy server to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-server'
    waitFor: ['run-tests']
    entrypoint: 'bash'
    args: ['scripts/deploy/server.sh']
    env:
      - 'SHORT_SHA=${SHORT_SHA}'
    secretEnv:
      - 'ARTIFACTS'
      - 'AUTH0_URL'
      - 'ENV'
      - 'FRONTEND_URL'
      - 'REGION'
      - 'ROOT_URL'
      - 'SERVER_CPU'
      - 'SERVER_MEMORY'
      - 'SERVICE_ACCOUNT'
      - 'SQL_INSTANCE'

  # Send traffic to new server
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'send-server-traffic'
    waitFor: ['deploy-server']
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud run services update-traffic wtix-server-$${ENV} \
        --region $${REGION} \
        --to-revisions=wtix-server-$${ENV}-${SHORT_SHA}=100
    secretEnv:
      - 'ENV'
      - 'REGION'

  # Delete server test revision
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'delete-test-server'
    waitFor: ['send-server-traffic']
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud run revisions delete wtix-server-$${ENV}-${SHORT_SHA}-test \
        --region $${REGION} \
        --quiet
    secretEnv:
      - 'ENV'
      - 'REGION'
 
  # Build client image using normal args
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-client'
    waitFor: ['run-tests']
    entrypoint: 'bash'
    args: ['scripts/build/client.sh']
    env:
      - 'SHORT_SHA=${SHORT_SHA}'
    secretEnv:
      - 'ARTIFACTS'
      - 'AUTH0_CLIENT_ID'
      - 'AUTH0_CLIENT_SECRET'
      - 'AUTH0_URL'
      - 'ENV'
      - 'PUBLIC_STRIPE_KEY'
      - 'ROOT_URL'

  # Push client image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-client'
    waitFor: ['build-client']
    entrypoint: 'bash'
    args: ['-c', 'docker push $${ARTIFACTS}/client-img-$${ENV}:${SHORT_SHA}']
    secretEnv: 
      - 'ARTIFACTS'
      - 'ENV'

  # Deploy client to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-client'
    waitFor: ['push-client', 'send-server-traffic']
    entrypoint: 'bash'
    args: ['scripts/deploy/client.sh']
    env:
      - 'SHORT_SHA=${SHORT_SHA}'
    secretEnv:
      - 'ARTIFACTS'
      - 'CLIENT_CPU'
      - 'CLIENT_MEMORY'
      - 'ENV'
      - 'REGION'
      - 'SERVICE_ACCOUNT'

  # Send traffic to new client
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'send-client-traffic'
    waitFor: ['deploy-client']
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud run services update-traffic wtix-client-$${ENV} \
        --region $${REGION} \
        --to-revisions=wtix-client-$${ENV}-${SHORT_SHA}=100
    secretEnv:
      - 'ENV'
      - 'REGION'

  # Delete client test revision
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'delete-test-client'
    waitFor: ['send-client-traffic']
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud run revisions delete wtix-client-$${ENV}-${SHORT_SHA}-test \
        --region $${REGION} \
        --quiet
    secretEnv:
      - 'ENV'
      - 'REGION'

# Use dev, stg, or prd versions depending on $_ENV value from trigger
availableSecrets:
  secretManager:
  - versionName: projects/${PROJECT_ID}/secrets/ARTIFACTS/versions/${_ENV}
    env: 'ARTIFACTS'
  - versionName: projects/${PROJECT_ID}/secrets/AUTH0_CLIENT_ID/versions/${_ENV}
    env: 'AUTH0_CLIENT_ID'
  - versionName: projects/${PROJECT_ID}/secrets/AUTH0_CLIENT_SECRET/versions/${_ENV}
    env: 'AUTH0_CLIENT_SECRET'
  - versionName: projects/${PROJECT_ID}/secrets/AUTH0_URL/versions/${_ENV}
    env: 'AUTH0_URL'
  - versionName: projects/${PROJECT_ID}/secrets/CLIENT_CPU/versions/${_ENV}
    env: 'CLIENT_CPU'
  - versionName: projects/${PROJECT_ID}/secrets/CLIENT_MEMORY/versions/${_ENV}
    env: 'CLIENT_MEMORY'
  - versionName: projects/${PROJECT_ID}/secrets/CLIENT_REVISION/versions/${_ENV}
    env: 'CLIENT_REVISION'
  - versionName: projects/${PROJECT_ID}/secrets/ENV/versions/${_ENV}
    env: 'ENV'
  - versionName: projects/${PROJECT_ID}/secrets/FRONTEND_URL/versions/${_ENV}
    env: 'FRONTEND_URL'
  - versionName: projects/${PROJECT_ID}/secrets/PUBLIC_STRIPE_KEY/versions/${_ENV}
    env: 'PUBLIC_STRIPE_KEY'
  - versionName: projects/${PROJECT_ID}/secrets/REGION/versions/${_ENV}
    env: 'REGION'
  - versionName: projects/${PROJECT_ID}/secrets/ROOT_URL/versions/${_ENV}
    env: 'ROOT_URL'
  - versionName: projects/${PROJECT_ID}/secrets/SERVER_CPU/versions/${_ENV}
    env: 'SERVER_CPU'
  - versionName: projects/${PROJECT_ID}/secrets/SERVER_MEMORY/versions/${_ENV}
    env: 'SERVER_MEMORY'
  - versionName: projects/${PROJECT_ID}/secrets/SERVER_REVISION/versions/${_ENV}
    env: 'SERVER_REVISION'
  - versionName: projects/${PROJECT_ID}/secrets/SERVICE_ACCOUNT/versions/${_ENV}
    env: 'SERVICE_ACCOUNT'
  - versionName: projects/${PROJECT_ID}/secrets/SQL_INSTANCE/versions/${_ENV}
    env: 'SQL_INSTANCE'
  - versionName: projects/${PROJECT_ID}/secrets/TEST_EMAIL/versions/${_ENV}
    env: 'TEST_EMAIL'
  - versionName: projects/${PROJECT_ID}/secrets/TEST_PASSWORD/versions/${_ENV}
    env: 'TEST_PASSWORD'
