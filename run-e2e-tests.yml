steps:

  # Build server image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build server image'
    entrypoint: 'bash'
    args: ['-c', 'docker build -f server/Dockerfile.dev -t $$ARTIFACTS/server-img-$$ENV:$SHORT_SHA server']
    secretEnv: ['ARTIFACTS', 'ENV']

  # Push server image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push server image'
    entrypoint: 'bash'
    args: ['-c', 'docker push $$ARTIFACTS/server-img-$$ENV:$SHORT_SHA']
    secretEnv: ['ARTIFACTS', 'ENV']

  # Deploy server to Cloud Run, tag as a test revision (receiving no traffic)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Deploy server without traffic'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud run deploy wtix-server-$$ENV \
        --image $$ARTIFACTS/server-img-$$ENV:$SHORT_SHA \
        --platform managed \
        --memory $$SERVER_MEMORY \
        --cpu $$SERVER_CPU \
        --cpu-boost \
        --allow-unauthenticated \
        --min-instances 1 \
        --max-instances 10 \
        --no-traffic \
        --tag test \
        --set-cloudsql-instances $$SQL_INSTANCE \
        --service-account $$SERVICE_ACCOUNT \
        --set-env-vars=\
        AUTH0_AUDIENCE=$$AUTH0_AUDIENCE,\
        AUTH0_URL=$$AUTH0_URL,\
        ENV=$$ENV,\
        FRONTEND_URL=$$CLIENT_REVISION,\
        ROOT_URL=$$SERVER_REVISION, \
        --set-secrets=\
        AUTH0_CLIENT_SECRET=AUTH0_CLIENT_SECRET:$$ENV,\
        DATABASE_URL=DATABASE_URL:$$ENV,\
        DB_DATABASE=DB_DATABASE:$$ENV,\
        DB_HOST=DB_HOST:$$ENV,\
        DB_PASSWORD=DB_PASSWORD:$$ENV,\
        DB_PORT=DB_PORT:$$ENV,\
        DB_USER=DB_USER:$$ENV,\
        PRIVATE_STRIPE_KEY=PRIVATE_STRIPE_KEY:$$ENV,\
    secretEnv:
      - 'ARTIFACTS'
      - 'AUTH0_AUDIENCE'
      - 'AUTH0_URL'
      - 'CLIENT_REVISION'
      - 'ENV'
      - 'REGION'
      - 'SERVER_CPU'
      - 'SERVER_MEMORY'
      - 'SERVER_REVISION'
      - 'SERVICE_ACCOUNT'
      - 'SQL_INSTANCE'

  # Build client image and pass in arguments needed by React at build time
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build client image'
    entrypoint: 'bash'
    args: 
      - '-c'
      - |
        docker build -f client/Dockerfile.dev -t $$ARTIFACTS/client-img-$$ENV:$SHORT_SHA client \
        --build-arg AUTH0_CLIENT_SECRET=$$AUTH0_CLIENT_SECRET \
        --build-arg REACT_APP_API_1_URL=$$REACT_APP_API_1_URL \
        --build-arg REACT_APP_API_2_URL=$$REACT_APP_API_2_URL \
        --build-arg REACT_APP_AUTH0_AUDIENCE=$$REACT_APP_AUTH0_AUDIENCE \
        --build-arg REACT_APP_AUTH0_CLIENT_ID=$$REACT_APP_AUTH0_CLIENT_ID \
        --build-arg REACT_APP_AUTH0_URL=$$REACT_APP_AUTH0_URL \
        --build-arg REACT_APP_PUBLIC_STRIPE_KEY=$$REACT_APP_PUBLIC_STRIPE_KEY \
        --build-arg REACT_APP_ROOT_URL=$$SERVER_REVISION
    secretEnv:
      - 'ARTIFACTS'
      - 'AUTH0_CLIENT_SECRET'
      - 'ENV'
      - 'REACT_APP_API_1_URL'
      - 'REACT_APP_API_2_URL'
      - 'REACT_APP_AUTH0_AUDIENCE'
      - 'REACT_APP_AUTH0_CLIENT_ID'
      - 'REACT_APP_AUTH0_URL'
      - 'REACT_APP_PUBLIC_STRIPE_KEY'
      - 'SERVER_REVISION'

  # Push client image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push to repo'
    entrypoint: 'bash'
    args: ['-c', 'docker push $$ARTIFACTS/client-img-$$ENV:$SHORT_SHA']
    secretEnv: 
      - 'ARTIFACTS'
      - 'ENV'

  # Deploy client to Cloud Run, tag as a test revision (receiving no traffic)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Deploy without traffic'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud run deploy wtix-client-$$ENV \
        --image $$ARTIFACTS/client-img-$$ENV:$SHORT_SHA \
        --region $$REGION \
        --platform managed \
        --memory $$CLIENT_MEMORY \
        --cpu $$CLIENT_CPU \
        --cpu-boost \
        --allow-unauthenticated \
        --min-instances 1 \
        --max-instances 10 \
        --no-traffic \
        --tag test \
        --set-env-vars=\
        ENV=$$ENV, \
        --set-secrets=\
        REACT_APP_AUTH1_CLIENT_ID=REACT_APP_AUTH0_CLIENT_ID:$$ENV,\
        REACT_APP_PUBLIC_STRIPE_KEY=REACT_APP_PUBLIC_STRIPE_KEY:$$ENV
    secretEnv:
      - 'ARTIFACTS'
      - 'CLIENT_CPU'
      - 'CLIENT_MEMORY'
      - 'ENV'
      - 'REGION'
      - 'SERVICE_ACCOUNT'

  # Wait 3 minutes for client to load all content
  - name: 'ubuntu'
    id: 'Wait for revision'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Waiting for client to start up..."
        sleep 180
    
  # Use client image to run E2E tests on test revision
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Run E2E tests'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        docker run --rm \
          -e TEST_EMAIL=$$TEST_EMAIL \
          -e TEST_PASSWORD=$$TEST_PASSWORD \
          $$ARTIFACTS/client-img-$$ENV:$SHORT_SHA \
          npm run test:playwright

        echo "All tests passed."
    secretEnv:
      - 'ARTIFACTS'
      - 'ENV'
    
  # Delete test revisions whether tests pass or fail
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Clean up'
    finally: true
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Deleting test revisions..."

        TEST_CLIENT=$$(gcloud run services describe wtix-client-$$ENV \
        --format="value(status.traffic[?tag='test'].revision)")
        TEST_SERVER=$$(gcloud run services describe wtix-server-$$ENV \
        --format="value(status.traffic[?tag='test'].revision)")

        gcloud run revisions delete $${TEST_CLIENT}
        gcloud run revisions delete $${TEST_SERVER}

        echo "Test revisions deleted."
    secretEnv:
      - 'ENV'

# Use dev, stg, or prd versions depending on $_ENV value from trigger
availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_ID/secrets/ARTIFACTS/versions/$_ENV
    env: 'ARTIFACTS'
  - versionName: projects/$PROJECT_ID/secrets/AUTH0_AUDIENCE/versions/$_ENV
    env: 'AUTH0_AUDIENCE'
  - versionName: projects/$PROJECT_ID/secrets/AUTH0_CLIENT_SECRET/versions/$_ENV
    env: 'AUTH0_CLIENT_SECRET'
  - versionName: projects/$PROJECT_ID/secrets/AUTH0_URL/versions/$_ENV
    env: 'AUTH0_URL'
  - versionName: projects/$PROJECT_ID/secrets/CLIENT_CPU/versions/$_ENV
    env: 'CLIENT_CPU'
  - versionName: projects/$PROJECT_ID/secrets/CLIENT_MEMORY/versions/$_ENV
    env: 'CLIENT_MEMORY'
  - versionName: projects/$PROJECT_ID/secrets/ENV/versions/$_ENV
    env: 'ENV'
  - versionName: projects/$PROJECT_ID/secrets/CLIENT_REVISION/versions/$_ENV
    env: 'FRONTEND_URL'
  - versionName: projects/$PROJECT_ID/secrets/REACT_APP_API_1_URL/versions/$_ENV
    env: 'REACT_APP_API_1_URL'
  - versionName: projects/$PROJECT_ID/secrets/REACT_APP_API_2_URL/versions/$_ENV
    env: 'REACT_APP_API_2_URL'
  - versionName: projects/$PROJECT_ID/secrets/AUTH0_AUDIENCE/versions/$_ENV
    env: 'REACT_APP_AUTH0_AUDIENCE'
  - versionName: projects/$PROJECT_ID/secrets/REACT_APP_AUTH0_CLIENT_ID/versions/$_ENV
    env: 'REACT_APP_AUTH0_CLIENT_ID'
  - versionName: projects/$PROJECT_ID/secrets/AUTH0_URL/versions/$_ENV
    env: 'REACT_APP_AUTH0_URL'
  - versionName: projects/$PROJECT_ID/secrets/REACT_APP_PUBLIC_STRIPE_KEY/versions/$_ENV
    env: 'REACT_APP_PUBLIC_STRIPE_KEY'
  - versionName: projects/$PROJECT_ID/secrets/REGION/versions/$_ENV
    env: 'REGION'
  - versionName: projects/$PROJECT_ID/secrets/SERVER_CPU/versions/$_ENV
    env: 'SERVER_CPU'
  - versionName: projects/$PROJECT_ID/secrets/SERVER_MEMORY/versions/$_ENV
    env: 'SERVER_MEMORY'
  - versionName: projects/$PROJECT_ID/secrets/SERVER_REVISION/versions/$_ENV
    env: 'SERVER_REVISION'
  - versionName: projects/$PROJECT_ID/secrets/SERVICE_ACCOUNT/versions/$_ENV
    env: 'SERVICE_ACCOUNT'
  - versionName: projects/$PROJECT_ID/secrets/SQL_INSTANCE/versions/$_ENV
    env: 'SQL_INSTANCE'
  - versionName: projects/$PROJECT_ID/secrets/TEST_EMAIL/versions/$_ENV
    env: 'TEST_EMAIL'
  - versionName: projects/$PROJECT_ID/secrets/TEST_PASSWORD/versions/$_ENV
    env: 'TEST_PASSWORD'

