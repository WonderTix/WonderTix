steps:

  # Build Docker image for client
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-client'
    entrypoint: 'bash'
    args: 
      - '-c'
      - |
        docker build -f client/Dockerfile.dev -t $$ARTIFACTS/client-img-$$ENV client \
        --build-arg AUTH0_CLIENT_SECRET=$$AUTH0_CLIENT_SECRET \
        --build-arg REACT_APP_API_1_URL=$$REACT_APP_API_1_URL \
        --build-arg REACT_APP_API_2_URL=$$REACT_APP_API_2_URL \
        --build-arg REACT_APP_AUTH0_AUDIENCE=$$AUTH0_AUDIENCE \
        --build-arg REACT_APP_AUTH0_CLIENT_ID=$$AUTH0_CLIENT_ID \
        --build-arg REACT_APP_AUTH0_URL=$$AUTH0_URL \
        --build-arg REACT_APP_PUBLIC_STRIPE_KEY=$$PUBLIC_STRIPE_KEY \
        --build-arg REACT_APP_ROOT_URL=$$ROOT_URL \
    secretEnv:
      - 'ARTIFACTS'
      - 'AUTH0_AUDIENCE'
      - 'AUTH0_CLIENT_ID'
      - 'AUTH0_CLIENT_SECRET'
      - 'AUTH0_URL'
      - 'ENV'
      - 'PUBLIC_STRIPE_KEY'
      - 'REACT_APP_API_1_URL'
      - 'REACT_APP_API_2_URL'
      - 'ROOT_URL'

  # Push image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-client'
    entrypoint: 'bash'
    args: ['-c', 'docker push $$ARTIFACTS/client-img-$$ENV']
    secretEnv:
      - 'ARTIFACTS'
      - 'ENV'

  # Deploy client image to Cloud Run without traffic
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-client'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud run deploy wtix-client-$$ENV \
        --image $$ARTIFACTS/client-img-$$ENV \
        --revision-suffix=$SHORT_SHA \
        --region $$REGION \
        --platform managed \
        --memory $$CLIENT_MEMORY \
        --cpu $$CLIENT_CPU \
        --cpu-boost \
        --allow-unauthenticated \
        --min-instances 1 \
        --max-instances 10 \
        --no-traffic \
        --set-env-vars=\
        ENV=$$ENV, \
        --set-secrets=\
        REACT_APP_AUTH0_CLIENT_ID=AUTH0_CLIENT_ID:$$ENV,\
        REACT_APP_PUBLIC_STRIPE_KEY=PUBLIC_STRIPE_KEY:$$ENV
    secretEnv:
      - 'ARTIFACTS'
      - 'CLIENT_CPU'
      - 'CLIENT_MEMORY'
      - 'ENV'
      - 'REGION'
      - 'SERVICE_ACCOUNT'

  # Send 10% of traffic to new revision to start it up
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'warm-up-client'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud run services update-traffic wtix-client-$$ENV \
        --region $$REGION \
        --to-revisions=wtix-client-$$ENV-$SHORT_SHA=10
    secretEnv:
      - 'ENV'
      - 'REGION'

  # Poll the /status endpoint for 5 minutes and check for readiness
  - name: 'curlimages/curl'
    id: 'wait-for-client'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        # TODO: need to tag new revision and use that URL here
        statusURL=$$REACT_APP_API_2_URL/status
        maxRetries=30
        for i in $$(seq 1 $$maxRetries); do
          response=$$(curl -s -o /dev/null -w "%{http_code}" $$statusURL) 
          if [ "$$response" == "200" ]; then
            echo "Client is ready. Sending it traffic..."
            exit 0
          else
            echo "Client is not ready: $$response. Attempt $$i/$$maxRetries."
            echo "Retrying in 10 seconds..."
            sleep 10
          fi
        done

        echo "Client did not spin up in time. Exiting..."
        exit 1
    secretEnv:
      - 'ENV'
      - 'REACT_APP_API_2_URL'

  # Gradually send traffic to new revision
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'send-traffic'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud run services update-traffic wtix-client-$$ENV \
        --region $$REGION \
        --to-revisions=wtix-client-$$ENV-$SHORT_SHA=50

        echo "Waiting 60 seconds before sending all traffic..."
        sleep 60

        gcloud run services update-traffic wtix-client-$$ENV \
        --region $$REGION \
        --to-revisions=wtix-client-$$ENV-$SHORT_SHA=100
    secretEnv:
      - 'ENV'
      - 'REGION'

# Use dev, stg, or prd versions depending on $_ENV value from trigger
availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_ID/secrets/ARTIFACTS/versions/$_ENV
    env: 'ARTIFACTS'
  - versionName: projects/$PROJECT_ID/secrets/AUTH0_AUDIENCE/versions/$_ENV
    env: 'AUTH0_AUDIENCE'
  - versionName: projects/$PROJECT_ID/secrets/AUTH0_CLIENT_ID/versions/$_ENV
    env: 'AUTH0_CLIENT_ID'
  - versionName: projects/$PROJECT_ID/secrets/AUTH0_CLIENT_SECRET/versions/$_ENV
    env: 'AUTH0_CLIENT_SECRET'
  - versionName: projects/$PROJECT_ID/secrets/AUTH0_URL/versions/$_ENV
    env: 'AUTH0_URL'
  - versionName: projects/$PROJECT_ID/secrets/CLIENT_CPU/versions/$_ENV
    env: 'CLIENT_CPU'
  - versionName: projects/$PROJECT_ID/secrets/CLIENT_MEMORY/versions/$_ENV
    env: 'CLIENT_MEMORY'
  - versionName: projects/$PROJECT_ID/secrets/ENV/versions/$_ENV
    env: 'ENV'
  - versionName: projects/$PROJECT_ID/secrets/PUBLIC_STRIPE_KEY/versions/$_ENV
    env: 'PUBLIC_STRIPE_KEY'
  - versionName: projects/$PROJECT_ID/secrets/REACT_APP_API_1_URL/versions/$_ENV
    env: 'REACT_APP_API_1_URL'
  - versionName: projects/$PROJECT_ID/secrets/REACT_APP_API_2_URL/versions/$_ENV
    env: 'REACT_APP_API_2_URL'
  - versionName: projects/$PROJECT_ID/secrets/REGION/versions/$_ENV
    env: 'REGION'
  - versionName: projects/$PROJECT_ID/secrets/ROOT_URL/versions/$_ENV
    env: 'ROOT_URL'
  - versionName: projects/$PROJECT_ID/secrets/SERVICE_ACCOUNT/versions/$_ENV
    env: 'SERVICE_ACCOUNT'

