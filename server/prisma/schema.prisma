generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// customer information
model contacts {
  contactid     Int      @id @default(autoincrement())
  firstname     String?  @db.VarChar(255)
  lastname      String?  @db.VarChar(255)
  email         String?  @unique @db.VarChar(100)
  address       String?  @db.VarChar(255)
  city          String?  @db.VarChar(255)
  state         String?  @db.VarChar(255)
  country       String?  @db.VarChar(255)
  postalcode    String?  @db.VarChar(255)
  phone         String?  @db.VarChar(15)
  seatingaccom  String?  @db.VarChar(255)
  donorbadge    Boolean? @default(false)
  vip           Boolean? @default(false)
  volunteerlist Boolean? @default(false)
  newsletter    Boolean? @default(false)
  createddate   DateTime @default(now()) @db.Timestamptz(3)
  orders        orders[]
}

/// date is used to store information about specific dates to simplify queries
model date {
  dateid                              Int              @id
  date_actual                         DateTime         @db.Date
  day_name                            String           @db.VarChar(9)
  day_of_week                         Int
  day_of_month                        Int
  day_of_quarter                      Int
  day_of_year                         Int
  week_of_month                       Int
  week_of_year                        Int
  month_actual                        Int
  month_name                          String           @db.VarChar(9)
  quarter                             Int
  year_actual                         Int
  first_day_of_week                   DateTime         @db.Date
  last_day_of_week                    DateTime         @db.Date
  first_day_of_month                  DateTime         @db.Date
  last_day_of_month                   DateTime         @db.Date
  first_day_of_quarter                DateTime         @db.Date
  last_day_of_quarter                 DateTime         @db.Date
  first_day_of_year                   DateTime         @db.Date
  last_day_of_year                    DateTime         @db.Date
  weekend                             Boolean
  discounts_discounts_enddateTodate   discounts[]      @relation("discounts_enddateTodate")
  discounts_discounts_startdateTodate discounts[]      @relation("discounts_startdateTodate")
  eventinstances                      eventinstances[]
  seasons_seasons_enddateTodate       seasons[]        @relation("seasons_enddateTodate")
  seasons_seasons_startdateTodate     seasons[]        @relation("seasons_startdateTodate")
  task_task_dateassignedTodate        task[]           @relation("task_dateassignedTodate")
  task_task_datecreatedTodate         task[]           @relation("task_datecreatedTodate")
  task_task_datedueTodate             task[]           @relation("task_datedueTodate")
}

/// discounts are applied to orders and may be limited to specific ticket types, event and/or dates
/// amount is a fixed amount discount, percent is a percentage discount
/// discounts with a percent and amount value will use the percent value capped at the amount value
model discounts {
  discountid                     Int         @id @default(autoincrement())
  code                           String?     @db.VarChar(32)
  amount                         Int?
  percent                        Int?
  startdate                      Int?
  enddate                        Int?
  tickettypeid_fk                Int?
  createdby_fk                   Int?
  usagelimit                     Int?
  min_tickets                    Int?
  min_events                     Int?
  users                          users?      @relation(fields: [createdby_fk], references: [userid], onDelete: NoAction, onUpdate: NoAction)
  date_discounts_enddateTodate   date?       @relation("discounts_enddateTodate", fields: [enddate], references: [dateid], onDelete: NoAction, onUpdate: NoAction)
  date_discounts_startdateTodate date?       @relation("discounts_startdateTodate", fields: [startdate], references: [dateid], onDelete: NoAction, onUpdate: NoAction)
  tickettype                     tickettype? @relation(fields: [tickettypeid_fk], references: [tickettypeid], onDelete: NoAction, onUpdate: NoAction)
  orders                         orders[]
}

/// customer or anonymous donations
/// donations can be one time or recurring, stored in the frequency field
/// payment_intent and refund_intent are stripe payment intent ids
model donations {
  donationid Int          @id @default(autoincrement())
  orderid_fk Int
  anonymous  Boolean      @default(false)
  amount     Decimal      @db.Money
  frequency  freq
  comments   String?      @db.VarChar(255)
  order      orders       @relation(fields: [orderid_fk], references: [orderid], onDelete: Cascade, onUpdate: Cascade)
  refund     refunditems?
}

/// an event instance is a specific showing of an event
/// tickets are sold for event instances only if the salesstatus is true and the event date is in the future
/// preview events are are pre showings of an event before the event is open to the public
model eventinstances {
  eventinstanceid    Int                  @id @default(autoincrement())
  eventid_fk         Int
  eventdate          Int
  eventtime          DateTime             @db.Timetz(6)
  salestatus         Boolean              @default(true)
  totalseats         Int                  @default(0)
  availableseats     Int                  @default(0)
  detail             String?              @db.VarChar(255)
  purchaseuri        String?              @db.VarChar(255)
  ispreview          Boolean              @default(false)
  deletedat          DateTime?
  date               date                 @relation(fields: [eventdate], references: [dateid], onDelete: NoAction, onUpdate: NoAction)
  event              events               @relation(fields: [eventid_fk], references: [eventid], onDelete: NoAction, onUpdate: NoAction, map: "eventinstances_eventid_fkey")
  ticketrestrictions ticketrestrictions[]
}

/// an event is a performance, a class, a workshop, etc.
/// the showings of an event are eventinstances
model events {
  eventid              Int              @id @default(autoincrement())
  seasonid_fk          Int?
  eventname            String           @db.VarChar(255)
  eventdescription     String           @default("") @db.VarChar(255)
  active               Boolean          @default(true)
  seasonticketeligible Boolean          @default(true)
  imageurl             String?          @db.VarChar(255)
  deletedat            DateTime?
  eventinstances       eventinstances[]
  seasons              seasons?         @relation(fields: [seasonid_fk], references: [seasonid], onDelete: SetNull, onUpdate: Cascade, map: "events_seasonid_fkey")
}

model order_ticketitems {
  id         Int          @id @default(autoincrement())
  orderid_fk Int
  price      Decimal
  order      orders       @relation(fields: [orderid_fk], references: [orderid], onDelete: Cascade, onUpdate: Cascade)
  ticketitem ticketitems?
  refund     refunditems?
}

/// supertable for sub ticket items tables (subscription, order, and exchange)
model ticketitems {
  id                     Int                @id @default(autoincrement())
  order_ticketitemid_fk  Int                @unique
  ticketrestrictionid_fk Int
  donated                Boolean            @default(false)
  redeemed               DateTime?          @db.Timestamp(3)
  ticketrestriction      ticketrestrictions @relation(fields: [ticketrestrictionid_fk], references: [ticketrestrictionsid], onDelete: Restrict, onUpdate: Cascade)
  order_ticketitem       order_ticketitems  @relation(fields: [order_ticketitemid_fk], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

/// a customers order
/// refund and payment intents are the uuids from stripe when a refund or payment is made
model orders {
  orderid           Int                 @id @default(autoincrement())
  orderdateandtime  DateTime            @default(now()) @db.Timestamp(3)
  contactid_fk      Int
  discountid_fk     Int?
  order_type        order_type
  stripe_intent     String?             @db.VarChar(255)
  checkout_sessions String?             @db.VarChar(255)
  contacts          contacts            @relation(fields: [contactid_fk], references: [contactid], onDelete: Restrict, onUpdate: Cascade, map: "orders_contactid_fkey")
  discounts         discounts?          @relation(fields: [discountid_fk], references: [discountid], onDelete: Restrict, onUpdate: Cascade, map: "orders_discountid_fkey")
  donations         donations[]
  refunditems       refunditems[]
  order_ticketitems order_ticketitems[]
}

model refunditems {
  id                    Int                @id @default(autoincrement())
  orderid_fk            Int
  order_ticketitemid_fk Int?               @unique
  donationid_fk         Int?               @unique
  amount                Decimal            @db.Money
  order                 orders             @relation(fields: [orderid_fk], references: [orderid], onDelete: Cascade, onUpdate: Cascade)
  donation              donations?         @relation(fields: [donationid_fk], references: [donationid], onDelete: Restrict, onUpdate: Cascade)
  order_ticketitem      order_ticketitems? @relation(fields: [order_ticketitemid_fk], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

/// provides a way to store reports
model savedreports {
  savedreportid Int     @id @default(autoincrement())
  tablename     String? @db.VarChar(255)
  queryattr     String?
}

/// a season is a collection of events over a period of time (e.g. a summer season)
model seasons {
  seasonid                      Int                            @id @default(autoincrement())
  name                          String                         @db.VarChar(100)
  startdate                     Int
  enddate                       Int
  imageurl                      String?                        @db.VarChar(255)
  events                        events[]
  deletedat                     DateTime?
  date_seasons_enddateTodate    date                           @relation("seasons_enddateTodate", fields: [enddate], references: [dateid], onDelete: NoAction, onUpdate: NoAction)
  date_seasons_startdateTodate  date                           @relation("seasons_startdateTodate", fields: [startdate], references: [dateid], onDelete: NoAction, onUpdate: NoAction)
  seasontickettypepricedefaults seasontickettypepricedefault[]
}

/// price of ticket type for all events in a given season
model seasontickettypepricedefault {
  id                 Int                  @id @default(autoincrement())
  seasonid_fk        Int
  tickettypeid_fk    Int
  price              Decimal              @default(0) @db.Money
  concessionprice    Decimal              @default(0) @db.Money
  season             seasons              @relation(fields: [seasonid_fk], references: [seasonid], onDelete: Cascade, onUpdate: Cascade)
  tickettype         tickettype           @relation(fields: [tickettypeid_fk], references: [tickettypeid], onDelete: Cascade, onUpdate: Cascade)
  ticketrestrictions ticketrestrictions[]

  @@unique([seasonid_fk, tickettypeid_fk])
}

/// used to create and assign tasks such as a todo-list, memo, investigate and issue, etc.
/// task may relate to a contact, donation, order, user, or other task
model task {
  taskid                        Int         @id @default(autoincrement())
  parentid_fk                   Int?
  assignto_fk                   Int?
  reportto_fk                   Int?
  subject                       String?     @db.VarChar(255)
  description                   String?     @db.VarChar(255)
  status                        state?
  datecreated                   Int?
  dateassigned                  Int?
  datedue                       Int?
  ref_contact                   Int?
  ref_donation                  Int?
  ref_order                     Int?
  ref_user                      Int?
  users_task_assignto_fkTousers users?      @relation("task_assignto_fkTousers", fields: [assignto_fk], references: [userid], onDelete: NoAction, onUpdate: NoAction, map: "task_assign_to_fkey")
  date_task_dateassignedTodate  date?       @relation("task_dateassignedTodate", fields: [dateassigned], references: [dateid], onDelete: NoAction, onUpdate: NoAction)
  date_task_datecreatedTodate   date?       @relation("task_datecreatedTodate", fields: [datecreated], references: [dateid], onDelete: NoAction, onUpdate: NoAction)
  date_task_datedueTodate       date?       @relation("task_datedueTodate", fields: [datedue], references: [dateid], onDelete: NoAction, onUpdate: NoAction)
  task                          task?       @relation("taskTotask", fields: [parentid_fk], references: [taskid], onDelete: NoAction, onUpdate: NoAction, map: "task_parent_id_fkey")
  other_task                    task[]      @relation("taskTotask")
  users_task_reportto_fkTousers users?      @relation("task_reportto_fkTousers", fields: [reportto_fk], references: [userid], onDelete: NoAction, onUpdate: NoAction)
  tasknotes                     tasknotes[]
}

/// contains additional notes for a task that can not fit in the description field
model tasknotes {
  tasknoteid Int     @id @default(autoincrement())
  taskid_fk  Int?
  date       Int?
  notes      String?
  task       task?   @relation(fields: [taskid_fk], references: [taskid], onDelete: NoAction, onUpdate: NoAction)
}

/// ticket restrictions for an event are used to limit the number of tickets that can be sold for a ticket type for an event instance
model ticketrestrictions {
  ticketrestrictionsid              Int                           @id @default(autoincrement())
  eventinstanceid_fk                Int
  tickettypeid_fk                   Int
  ticketlimit                       Int
  price                             Decimal                       @default(0) @db.Money
  concessionprice                   Decimal                       @default(0) @db.Money
  seasontickettypepricedefaultid_fk Int?
  deletedat                         DateTime?                     @db.Timestamp(3)
  eventinstance                     eventinstances                @relation(fields: [eventinstanceid_fk], references: [eventinstanceid], onDelete: NoAction, onUpdate: NoAction)
  tickettype                        tickettype                    @relation(fields: [tickettypeid_fk], references: [tickettypeid], onDelete: NoAction, onUpdate: NoAction)
  seasontickettypepricedefault      seasontickettypepricedefault? @relation(fields: [seasontickettypepricedefaultid_fk], references: [id], onDelete: SetNull, onUpdate: Cascade)
  ticketitems                       ticketitems[]
}

/// types of tickets that can be assigned to an event
model tickettype {
  tickettypeid                  Int                            @id @default(autoincrement())
  description                   String                         @db.VarChar(100)
  price                         Decimal                        @db.Money
  concessions                   Decimal                        @db.Money
  deprecated                    Boolean?                       @default(false)
  discounts                     discounts[]
  ticketrestrictions            ticketrestrictions[]
  seasontickettypepricedefaults seasontickettypepricedefault[]
}

/// users have access to the admin area to manage events, tickets, etc
/// only users with the is_superadmin flag can access the reports
model users {
  userid                       Int         @id @default(autoincrement())
  username                     String      @db.VarChar(255)
  is_superadmin                Boolean     @default(false)
  auth0_id                     String?     @db.VarChar(255)
  discounts                    discounts[]
  task_task_assignto_fkTousers task[]      @relation("task_assignto_fkTousers")
  task_task_reportto_fkTousers task[]      @relation("task_reportto_fkTousers")
}

enum freq {
  one_time @map("one-time")
  weekly
  monthly
  yearly
}

enum state {
  not_started
  in_progress
  completed
}

enum order_type {
  purchase
  refund
}

model StripeWebhook {
  id        Int     @id @default(autoincrement())
  eventid   String
  event     String
  livemode  Boolean
  created   Int
  data      String
  object    String
  requestid String
  type      String
}

model Error {
  id        Int    @id @default(autoincrement())
  message   String
  stack     String
  createdAt Int
}

//  0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
//    ALL MODELS BELOW WERE TAKEN FROM THE IMPORTED SALESFORCE DATA FROM PPH
//  0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

// Account information pulled from PPH
model pphAccounts {
  account_id                          BigInt               @id @default(autoincrement())
  is_deleted                          Int                  @default(0)
  name                                String?
  type                                String?
  shipping_street                     String?
  shipping_city                       String?
  shipping_state                      String?
  shipping_postal_code                String?
  shipping_country                    String?
  phone                               String?
  fax                                 String?
  website                             String?
  created_date                        DateTime             @default(now())
  last_modified_date                  DateTime
  last_modified_by_id                 BigInt?
  last_activity_date                  DateTime?
  do_not_call                         Int?                 @default(0)
  do_not_mail                         Int?                 @default(0)
  donor_recognition                   String?
  donor_email                         String?
  formal_salutation                   String?
  has_opted_out_of_email              Int                  @default(0)
  informal_address_name               String?
  informal_salutation                 String?
  attn                                String?
  grant_size                          String?
  will_give_it                        String?
  first_donation_date                 DateTime?
  last_donation_date                  DateTime?
  lifetime_donation_history_amount    Decimal              @default(0.0) @db.Decimal(10, 2)
  lifetime_donation_number            Int                  @default(0)
  this_year_donation_history_amount   Decimal              @default(0.0) @db.Decimal(10, 2)
  amount_donated_this_fiscal_year     Decimal              @default(0.0) @db.Decimal(10, 2)
  last_donation_amount                Decimal              @default(0.0) @db.Decimal(10, 2)
  lifetime_single_ticket_amount       Decimal              @default(0.0) @db.Decimal(10, 2)
  lifetime_subscription_amount        Decimal              @default(0.0) @db.Decimal(10, 2)
  board_member                        Int                  @default(0)
  show_sponsor                        Int                  @default(0)
  seating_accomodation                Int                  @default(0)
  amount_donated_CY20                 Decimal              @default(0.0) @db.Decimal(10, 2)
  amount_donated_CY18                 Decimal              @default(0.0) @db.Decimal(10, 2)
  sort_name                           String?
  amount_donated_last_fiscal_year     Decimal              @default(0.0) @db.Decimal(10, 2)
  amount_donated_CY21                 Decimal              @default(0.0) @db.Decimal(10, 2)
  amount_donated_CY19                 Decimal              @default(0.0) @db.Decimal(10, 2)
  amount_donated_FY20                 Decimal              @default(0.0) @db.Decimal(10, 2)
  amount_donated_FY19                 Decimal              @default(0.0) @db.Decimal(10, 2)
  amount_donated_FY18                 Decimal              @default(0.0) @db.Decimal(10, 2)
  lifetime_donations_included_pledged Decimal              @default(0.0) @db.Decimal(10, 2)
  first_donation_date_incl_pledged    DateTime?
  amount_donated_FY21                 Decimal              @default(0.0) @db.Decimal(10, 2)
  first_donation_amount               Decimal              @default(0.0) @db.Decimal(10, 2)
  largest_donation_date               DateTime?
  amount_donated_FY22                 Decimal              @default(0.0) @db.Decimal(10, 2)
  amount_Donated_FY23                 Decimal              @default(0.0) @db.Decimal(10, 2)
  amount_Donated_FY24                 Decimal              @default(0.0) @db.Decimal(10, 2)
  pphNotes                            pphNotes[]
  pphContacts                         pphContacts[]
  pphTicketorders                     pphTicketorders[]
  pphTicketorderitems                 pphTicketorderitem[]
  pphOpportunity                      pphOpportunity[]
}

/// customer information
model pphContacts {
  contact_id                BigInt               @id @default(autoincrement())
  account_id                BigInt?
  account                   pphAccounts?         @relation(fields: [account_id], references: [account_id])
  is_deleted                Int                  @default(0)
  salutation                String?
  first_name                String?
  last_name                 String?
  other_street              String?
  other_city                String?
  other_state               String?
  other_postal_code         String?
  other_country             String?
  mailing_street            String?
  mailing_city              String?
  mailing_state             String?
  mailing_postal_code       String?
  mailing_country           String?
  phone                     String?
  fax                       String?
  mobile_phone              String?
  home_phone                String?
  other_phone               String?
  email                     String?
  title                     String?
  department                String?
  birth_date                DateTime?
  description               String?
  has_opted_out_of_email    Int                  @default(0)
  has_opted_out_of_fax      Int                  @default(0)
  do_not_call               Int                  @default(0)
  created_date              DateTime?            @default(now())
  created_by_id             BigInt?
  last_modified_date        DateTime?
  last_modified_by_id       BigInt?
  system_modstamp           DateTime?
  last_activity_date        DateTime?
  email_bounce_reason       String?
  email_bounce_date         DateTime?
  pronouns                  String?
  gender_identity           String?
  donate_date_entered       DateTime?
  deceased                  Int                  @default(0)
  do_not_mail               Int                  @default(0)
  donor_recognition         String?
  formal_salutation         String?
  informal_address_name     String?
  informal_salutation       String?
  volunteer_interests       String?
  other_email               String?
  company                   String?
  middle_name               String?
  suffix                    String?
  contact_origin            String?
  email_status              String?
  current_season_subscriber Decimal?             @default(0.0) @db.Decimal(10, 2)
  email_lists               String?
  board_member              Decimal?             @default(0.0) @db.Decimal(10, 2)
  seating_accomodation      Decimal?             @default(0.0) @db.Decimal(10, 2)
  reserved_seating          Decimal?             @default(0.0) @db.Decimal(10, 2)
  attending_next_dinner     Decimal?             @default(0.0) @db.Decimal(10, 2)
  chocolate_and_card        Decimal?             @default(0.0) @db.Decimal(10, 2)
  legacy_membership_circle  Decimal?             @default(0.0) @db.Decimal(10, 2)
  email_list_notes          String?
  pphNotes                  pphNotes[]
  pphTicketorders           pphTicketorders[]
  pphTicketorderitems       pphTicketorderitem[]
  pphOpportunity            pphOpportunity[]
}

/// Owner_id in the original PPH schema pointed to the PPH employee/user 
/// who was associated with maintaining the account. 
model pphEvents {
  event_id                      BigInt   @id @default(autoincrement())
  owner_id                      BigInt?
  name                          String?
  create_date                   DateTime @default(now())
  last_modified_date            DateTime
  active_flag                   Int      @default(0)
  description                   String?
  detail                        String?
  event_category                String?
  season                        String?
  performance_date              DateTime
  pre_post_show_email_flag      Float?
  pre_show_email_cutoff_minutes Float?
  pre_show_email_minutes        Float?
  run_time                      String?
}

// Note table taken from PPH:
model pphNotes {
  note_id            BigInt       @id @default(autoincrement())
  is_deleted         Int          @default(0)
  contact_id         BigInt?
  contact            pphContacts? @relation(fields: [contact_id], references: [contact_id])
  account_id         BigInt?
  account            pphAccounts? @relation(fields: [account_id], references: [account_id])
  title              String?
  body               String?
  created_date       DateTime     @default(now())
  last_modified_date DateTime?
}

model pphTransactions {
  transaction_id                      BigInt              @id @default(autoincrement())
  patron_transaction_id               BigInt?
  ticket_order_id                     BigInt?
  ticketorders                        pphTicketorders?    @relation(fields: [ticket_order_id], references: [ticket_order_id])
  item_id                             BigInt?
  ticket_order_item_id                BigInt?
  ticketorderitem                     pphTicketorderitem? @relation(fields: [ticket_order_item_id], references: [ticket_order_item_id])
  item_type                           String?
  item_name                           String?
  payment_method                      String?
  status                              String?
  payment_processor                   String?
  exchange_type                       String?
  order_origin                        String?
  entry_method                        String?
  credit_card_entry_method            String?
  credit_card_last_four               Int?
  name_on_card                        String?
  first_name                          String?
  last_name                           String?
  transaction_date                    DateTime
  create_date                         DateTime            @default(now())
  quantity                            Decimal             @default(0.0) @db.Decimal(10, 2)
  buyer_unit_price                    Decimal             @default(0.0) @db.Decimal(10, 2)
  gross_unit_price                    Decimal             @default(0.0) @db.Decimal(10, 2)
  buyer_unit_fee                      Decimal             @default(0.0) @db.Decimal(10, 2)
  patron_tech_unit_fee                Decimal             @default(0.0) @db.Decimal(10, 2)
  unit_fee                            Decimal             @default(0.0) @db.Decimal(10, 2)
  total_item_quantity                 Decimal             @default(0.0) @db.Decimal(10, 2)
  buyer_fee_line_item_sub_total       Decimal             @default(0.0) @db.Decimal(10, 2)
  patron_tech_fee_line_item_sub_total Decimal             @default(0.0) @db.Decimal(10, 2)
  shipping_fee                        Decimal?            @default(0.0) @db.Decimal(10, 2)
  exchange_fee                        Decimal?            @default(0.0) @db.Decimal(10, 2)
  discount_amount                     Decimal?            @default(0.0) @db.Decimal(10, 2)
  donation_amount                     Decimal?            @default(0.0) @db.Decimal(10, 2)
  full_buyer_cost                     Decimal             @default(0.0) @db.Decimal(10, 2)
  full_gross_amount                   Decimal             @default(0.0) @db.Decimal(10, 2)
  transaction_total                   Decimal             @default(0.0) @db.Decimal(10, 2)
  amount_tendered                     Decimal?            @default(0.0) @db.Decimal(10, 2)
  capture_transaction_id              BigInt?
}

model pphTicketorders {
  ticket_order_id              BigInt               @id @default(autoincrement())
  account_id                   BigInt?
  account                      pphAccounts?         @relation(fields: [account_id], references: [account_id])
  contact_id                   BigInt?
  contact                      pphContacts?         @relation(fields: [contact_id], references: [contact_id])
  ticket_order_name            String?
  type                         String?
  order_status                 String?
  subscription_status          String?
  email                        String?
  phone                        String?
  other_phone                  String?
  street_address               String?
  city                         String?
  state                        String?
  postal_code                  String?
  country                      String?
  shipping_first_name          String?
  shipping_last_name           String?
  shipping_stress_address      String?
  shipping_city                String?
  shipping_state               String?
  shipping_postal_code         String?
  shipping_country             String?
  order_origin                 String?
  order_source                 String?
  payment_method               String?
  amount_paid                  Decimal?             @default(0.00) @db.Decimal(10, 2)
  fees                         Decimal?             @default(0.00) @db.Decimal(10, 2)
  exchange_fee                 Decimal?             @default(0.00) @db.Decimal(10, 2)
  donation_id                  Int?
  donation_amount              Decimal?             @default(0.00) @db.Decimal(10, 2)
  delivery_method              String?
  salutation                   String?
  shipping_salutation          String?
  email_opt_in                 Int?                 @default(0)
  anonymous_purchase_flag      Int?
  update_contact_record        Float?
  send_confirmation_email_flag Float?
  request_accommodation        String?
  external_id                  BigInt?
  comments                     String?
  notes                        String?
  create_date                  DateTime             @default(now())
  last_modified_date           DateTime?
  pphTicketorderitem           pphTicketorderitem[]
  pphTransactions              pphTransactions[]
}

model pphTicketorderitem {
  ticket_order_item_id       BigInt            @id @default(autoincrement())
  ticket_order_id            BigInt?
  ticketorder                pphTicketorders?  @relation(fields: [ticket_order_id], references: [ticket_order_id])
  account_id                 BigInt?
  account                    pphAccounts?      @relation(fields: [account_id], references: [account_id])
  contact_id                 BigInt?
  contact                    pphContacts?      @relation(fields: [contact_id], references: [contact_id])
  status                     String?
  season                     String?
  event_id                   BigInt?
  subscription_order_item_id BigInt?
  price_level_id             BigInt?
  quantity                   Float             @default(1.0)
  ticket_price               Decimal?          @default(0.00) @db.Decimal(10, 2)
  unit_price                 Decimal?          @default(0.00) @db.Decimal(10, 2)
  amount_paid                Decimal?          @default(0.00) @db.Decimal(10, 2)
  sales_tax                  Decimal?          @default(0.00) @db.Decimal(10, 2)
  discount_code_id           BigInt?
  discount_amount            Decimal?          @default(0.00) @db.Decimal(10, 2)
  discount_type              String?
  unit_fee                   Decimal?          @default(0.00) @db.Decimal(10, 2)
  ticket_notes               String?
  barcode                    String?
  create_date                DateTime          @default(now())
  last_modified_date         DateTime
  entry_date                 DateTime?
  pphTransactions            pphTransactions[]
}

model pphRecordtype {
  record_type_id     BigInt           @id @default(autoincrement())
  name               String?
  description        String?
  sobject_type       String?
  is_active          Int?
  created_date       DateTime         @default(now())
  last_modified_date DateTime
  system_modstamp    DateTime
  is_deleted         Int?             @default(0)
  pphOpportunity     pphOpportunity[]
}

/// Once again, owner_id is associated with whoever the employee is who
/// created the account in the accounts table
/// donor_id is also a reference to contacts based on shallow searching of mine 
model pphOpportunity {
  opportunity_id          BigInt         @id @default(autoincrement())
  is_deleted              Int            @default(0)
  account_id              BigInt?
  account                 pphAccounts?   @relation(fields: [account_id], references: [account_id])
  record_type_id          BigInt?
  record_type             pphRecordtype? @relation(fields: [record_type_id], references: [record_type_id])
  is_private              Int?           @default(0)
  name                    String?
  description             String?
  amount                  Decimal?       @default(0.00) @db.Decimal(10, 2)
  close_date              DateTime?
  type                    String?
  campaign_id             BigInt?
  owner_id                BigInt?
  created_date            DateTime       @default(now())
  last_modified_date      DateTime?
  fiscal_year             Int?
  fiscal_quarter          Int?
  contact_id              BigInt?
  contacts                pphContacts?   @relation(fields: [contact_id], references: [contact_id])
  is_anonymous            Int?
  amount_paid             Decimal?       @default(0.00) @db.Decimal(10, 2)
  dedication_honoree_name String?
  dedication_type         String?
  donor_id                BigInt?
  fund_type               String?
  grant_amount            Decimal?       @default(0.00) @db.Decimal(10, 2)
  payment_type            String?
  sub_type                String?
  fiscal_year_season      String?
  grant_ask_amount        Decimal?       @default(0.00) @db.Decimal(10, 2)
  appeal                  String?
  tax_deductible_amount   Decimal?       @default(0.00) @db.Decimal(10, 2)
  acknowledged_by_letter  Float?
}
