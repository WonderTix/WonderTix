steps:

  # Build Docker image for server
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-server'
    entrypoint: 'bash'
    args: ['-c', 'docker build -f server/Dockerfile.dev -t $${ARTIFACTS}/server-img-$${ENV}:${SHORT_SHA} server']
    secretEnv:
      - 'ARTIFACTS'
      - 'ENV'

  # Push image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-server'
    entrypoint: 'bash'
    args: ['-c', 'docker push $${ARTIFACTS}/server-img-$${ENV}:${SHORT_SHA}']
    secretEnv: 
      - 'ARTIFACTS'
      - 'ENV'

  # Deploy server to Cloud Run and immediately start accepting traffic
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-server'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud run deploy wtix-server-$${ENV} \
        --image $${ARTIFACTS}/server-img-$${ENV}:${SHORT_SHA} \
        --revision-suffix=${SHORT_SHA} \
        --region $${REGION} \
        --platform managed \
        --memory $${SERVER_MEMORY} \
        --cpu $${SERVER_CPU} \
        --cpu-boost \
        --allow-unauthenticated \
        --min-instances 1 \
        --max-instances 10 \
        --set-cloudsql-instances $${SQL_INSTANCE} \
        --service-account $${SERVICE_ACCOUNT} \
        --set-env-vars=\
        AUTH0_AUDIENCE=$${AUTH0_AUDIENCE},\
        AUTH0_URL=$${AUTH0_URL},\
        ENV=$${ENV},\
        FRONTEND_URL=$${FRONTEND_URL},\
        ROOT_URL=$${ROOT_URL}, \
        --set-secrets=\
        AUTH0_CLIENT_SECRET=AUTH0_CLIENT_SECRET:$${ENV},\
        DATABASE_URL=DATABASE_URL:$${ENV},\
        DB_DATABASE=DB_DATABASE:$${ENV},\
        DB_HOST=DB_HOST:$${ENV},\
        DB_PASSWORD=DB_PASSWORD:$${ENV},\
        DB_PORT=DB_PORT:$${ENV},\
        DB_USER=DB_USER:$${ENV},\
        PRIVATE_STRIPE_KEY=PRIVATE_STRIPE_KEY:$${ENV}
    secretEnv:
      - 'ARTIFACTS'
      - 'AUTH0_AUDIENCE'
      - 'AUTH0_URL'
      - 'ENV'
      - 'FRONTEND_URL'
      - 'REGION'
      - 'ROOT_URL'
      - 'SERVER_CPU'
      - 'SERVER_MEMORY'
      - 'SERVICE_ACCOUNT'
      - 'SQL_INSTANCE'

# Use dev, stg, or prd versions depending on $_ENV value from trigger
availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_ID/secrets/ARTIFACTS/versions/$_ENV
    env: 'ARTIFACTS'
  - versionName: projects/$PROJECT_ID/secrets/AUTH0_AUDIENCE/versions/$_ENV
    env: 'AUTH0_AUDIENCE'
  - versionName: projects/$PROJECT_ID/secrets/AUTH0_URL/versions/$_ENV
    env: 'AUTH0_URL'
  - versionName: projects/$PROJECT_ID/secrets/ENV/versions/$_ENV
    env: 'ENV'
  - versionName: projects/$PROJECT_ID/secrets/FRONTEND_URL/versions/$_ENV
    env: 'FRONTEND_URL'
  - versionName: projects/$PROJECT_ID/secrets/REGION/versions/$_ENV
    env: 'REGION'
  - versionName: projects/$PROJECT_ID/secrets/ROOT_URL/versions/$_ENV
    env: 'ROOT_URL'
  - versionName: projects/$PROJECT_ID/secrets/SERVER_CPU/versions/$_ENV
    env: 'SERVER_CPU'
  - versionName: projects/$PROJECT_ID/secrets/SERVER_MEMORY/versions/$_ENV
    env: 'SERVER_MEMORY'
  - versionName: projects/$PROJECT_ID/secrets/SERVICE_ACCOUNT/versions/$_ENV
    env: 'SERVICE_ACCOUNT'
  - versionName: projects/$PROJECT_ID/secrets/SQL_INSTANCE/versions/$_ENV
    env: 'SQL_INSTANCE'
