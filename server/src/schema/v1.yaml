openapi: 3.0.0
info:
  title: WonderTix API
  description: API Descriptions for the WonderTix Capstone Project
  version: 0.1.0

servers:
  - url: https://localhost:8000
    description: WonderTix on Localhost

paths:
  /api/accounts:
    get:
      summary: Get a list of all accounts. Optionally, filter accounts by username and/or admin status.
      parameters:
        - in: query
          name: username
          schema:
            type: string
          description: username of the account to filter by
        - in: query
          name: is_superadmin
          schema:
            type: boolean
          description: superadmin status of the account to filter by
      tags:
        - Accounts
      responses:
        200:
          description: Returns all of the accounts in the database. Requires Auth0 authentication with admin scope.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/accounts-get"
        404:
          $ref: "#/components/responses/NotFound"

    post:
      summary: Inserts an account
      tags:
        - Accounts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/accounts-reqbody"
                - type: object
                  properties:
                    auth0_id:
                      type: string
                  required:
                    - username
      responses:
        200:
          description: Creates a user and returns the created user object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/accounts-post"
        404:
          $ref: "#/components/responses/NotFound"

  /api/accounts/search:
    get:
      summary: Search for an account by username
      parameters:
        - in: query
          name: username
          schema:
            type: string
          description: username of the account to filter by
      tags:
        - Accounts
      responses:
        200:
          description: Returns the account if found. Requires Auth0 authentication with admin scope.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/accounts-get"
        404:
          $ref: "#/components/responses/NotFound"


  /api/accounts/{id}:
    get:
      summary: Search for an account by username
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: ID of the account to filter by
      tags:
        - Accounts
      responses:
        200:
          description: Returns the account if found. Requires Auth0 authentication with admin scope.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/accounts-get"
        404:
          $ref: "#/components/responses/NotFound"

    delete:
      summary: Deletes a user account by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
      tags:
        - Accounts
      responses:
        204:
          description: The resource was deleted successfully
        404:
          description: An error occured querying the database

    put:
      summary: Updates a user account by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: The ID of the user account to update
      tags:
        - Accounts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                auth0_id:
                  type: string
                required:
                  - username
      responses:
        200:
          description: Returns the updated object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/accounts-put"
        404:
          $ref: "#/components/responses/NotFound"


  /api/contacts:
    get:
      summary: Get a list of all contacts. Optionally, filter accounts by customer name, email, phone number, address, vip status, or volunteer list
      parameters:
        - in: query
          name: custname
          schema:
            type: string
          description: custname of the contact to filter by
        - in: query
          name: email
          schema:
            type: string
          description: email of the contact to filter by
        - in: query
          name: phone
          schema:
            type: string
          description: phone number of the contact to filter by
        - in: query
          name: address
          schema:
            type: string
          description: address of the contact to filter by
        - in: query
          name: vip
          schema:
            type: boolean
          description: vip status of the contact to filter by
        - in: query
          name: volunteerlist
          schema:
            type: string
          description: volunteer status of the contact to filter by
      tags:
        - Contacts
      responses:
        200:
          description: Returns all of the contacts in the database. Requires Auth0 authentication with admin scope.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/contacts-get"
        404:
          $ref: "#/components/responses/NotFound"

    post:
      summary: Inserts a contact
      tags:
        - Contacts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/contacts-reqbody"
      responses:
        200:
          description: Creates a contact and returns the created contact object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/contacts-post"
        404:
          $ref: "#/components/responses/NotFound"

  /api/contacts/search:
    get:
      summary: Search for an contact by name
      parameters:
        - in: query
          name: name
          schema:
            type: string
          description: name of the contact to filter by
          required: true
      tags:
        - Contacts
      responses:
        200:
          description: Returns the contact if found. Requires Auth0 authentication with admin scope.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/contacts-get"
        404:
          $ref: "#/components/responses/NotFound"

  /api/contacts/{id}:
    get:
      summary: Search for an contact by id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: name of the contact to filter by
          required: true
      tags:
        - Contacts
      responses:
        200:
          description: Returns the contact if found. Requires Auth0 authentication with admin scope.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/contacts-get"
        404:
          $ref: "#/components/responses/NotFound"

    put:
      summary: Update an existing contact
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schema/contacts-reqbody"
      tags:
        - Contacts
      responses:
        200:
          description: Upon successfully updating a contact, returns the updated contact
          content:
            application/json:
              schema:
                $ref: "#/components/schema/contacts-put"
        404:
          $ref: "#/components/responses/NotFound"
                

    delete:
      summary: Deletes a customer with a specific ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: The ID of the contact to search for
          required: true
      tags:
        - Contacts
      responses:
        204:
          description: The resource was deleted successfully
        404:
          description: An error occured querying the database

  /api/donations:
    get:
      summary: Get a list of all donations
      tags:
        - Donations
      responses:
        200:
          description: Returns all of the donations in the donation table. Requires Auth0 authentication with admin scope.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/donations-get"
        404:
          $ref: "#/components/responses/NotFound"
    post:
      summary: Inserts a donation
      tags:
        - Donations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/donations-reqbody"
      responses:
        200:
          description: Creates a user and returns the created user object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/donations-post"
        404:
          $ref: "#/components/responses/NotFound"

  /api/donations/search:
    get:
      summary: Search for a donation by contact name
      parameters:
        - in: query
          name: name
          schema:
            type: string
          description: Name of the donor to filter by
      tags:
        - Donations
      responses:
        200:
          description: Returns a list of donations for a specific contact. Requires Auth0 authentication with admin scope.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/donations-get"
        404:
          $ref: "#/components/responses/NotFound"

  /api/donations/{id}:
    get:
      summary: Returns a donation based on donation ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: ID of the donation to filter by
      tags: 
        - Donations
      responses:
        200:
          description: Returns a donation based on donation ID. Requires Auth0 authentication with admin scope.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/donations-get"
        404:
          $ref: "#/components/responses/NotFound"

    delete:
      summary: Delete a record of a donation
      tags:
        - Donations
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: ID of the donation to delete
      responses:
        204:
          description: The resource was deleted successfully
        404:
          description: An error occured while querying the database

    put:
      summary: Update the record of a donation
      tags:
        - Donations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/donations-reqbody"
      responses:
        200:
          description: Creates a user and returns the created user object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/donations-put"
        404:
          $ref: "#/components/responses/NotFound"

  /api/doorlist:
    get:
      summary: Get a list of all contacts in a doorlist.
      tags:
        - Doorlist
      responses:
        200:
          description: Returns all of the contacts for a specific event in the database. Requires Auth0 authentication with admin scope.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/doorlist-get"
        404:
          $ref: "#/components/responses/NotFound"







































security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    $ref: "./src/schema/responses.yaml"

  schemas:
    accounts-get:
      $ref: "./src/schema/accounts.yaml#/get"

    accounts-reqbody:
      $ref: "./src/schema/accounts.yaml#/reqbody"

    accounts-post:
      $ref: "./src/schema/accounts.yaml#/post"

    accounts-put:
      $ref: "./src/schema/accounts.yaml#/put"

    contacts-get:
      $ref: "./src/schema/contacts.yaml#/get"

    contacts-reqbody:
      $ref: "./src/schema/contacts.yaml#/reqbody"

    contacts-post:
      $ref: "./src/schema/contacts.yaml#/post"

    contacts-put:
      $ref: "./src/schema/contacts.yaml#/put"

    donations-get:
      $ref: "./src/schema/donations.yaml#/get"

    donations-reqbody:
      $ref: "./src/schema/donations.yaml#/reqbody"

    donations-post:
      $ref: "./src/schema/donations.yaml#/post"

    donations-put:
      $ref: "./src/schema/donations.yaml#/put"

    doorlist-get:
      $ref: "./src/schema/doorlist.yaml#/get"
