generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Account information pulled from PPH
model accounts {
  id                                    Int         @id                @default(autoincrement())
  isdeleted                             Int                            @default(0)
  name                                  String?     @db.VarChar(255)
  type                                  patronType
  shippingstreet                        String?     @db.VarChar(255)
  shippingcity                          String?     @db.VarChar(255)
  shippingstate                         String?     @db.VarChar(255)
  shippingpostalcode                    String?     @db.VarChar(255)
  shippingcountry                       String?     @db.VarChar(255)
  phone                                 String?     @db.VarChar(20)
  fax                                   String?     @db.VarChar(20)
  website                               String?     @db.VarChar(255)
  createddate                           DateTime                      @default(now())
  lastmodifieddate                      DateTime
  lastmodifiedbyid                      String?     @db.VarChar(255)
  lastactivitydate                      DateTime?
  do_not_call                           Int                           @default(0)
  do_not_mail                           Int                           @default(0)
  donor_recognition                     String?     @db.VarChar(255)
  donor_email                           String?     @db.VarChar(255)
  formal_salutation                     String?     @db.VarChar(255)
  hasoptedoutofemail                    Int                           @default(0)
  informal_address_name                 String?     @db.VarChar(255)
  informal_salutation                   String?     @db.VarChar(255)
  attn                                  String?     @db.VarChar(255)
  grant_size                            String?     @db.VarChar(255)
  will_give_it                          String?     @db.VarChar(255)
  first_donation_date                   DateTime?
  last_donation_date                    DateTime?
  lifetime_donation_history_amount      Decimal   @db.Decimal(10, 2)  @default(0.0)
  lifetime_donation_number              Int                           @default(0)
  this_year_donation_history_amount     Decimal   @db.Decimal(10, 2)  @default(0.0)
  amount_donated_this_fiscal_year       Decimal   @db.Decimal(10, 2)  @default(0.0)
  last_donation_amount                  Decimal   @db.Decimal(10, 2)  @default(0.0)
  lifetimesingleticketamount            Decimal   @db.Decimal(10, 2)  @default(0.0)
  lifetimesubscriptionamount            Decimal   @db.Decimal(10, 2)  @default(0.0)
  board_member                          Int                           @default(0)
  show_sponsor                          Int                           @default(0)
  seating_accomodation                  Int                           @default(0)
  amount_donated_CY20                   Decimal   @db.Decimal(10, 2)  @default(0.0)
  amount_donated_CY18                   Decimal   @db.Decimal(10, 2)  @default(0.0)
  sort_name                             String?   @db.VarChar(255)
  amount_donated_last_fiscal_year       Decimal   @db.Decimal(10, 2)  @default(0.0)
  amount_donated_CY21                   Decimal   @db.Decimal(10, 2)  @default(0.0)
  amount_donated_CY19                   Decimal   @db.Decimal(10, 2)  @default(0.0)
  amount_donated_FY20                   Decimal   @db.Decimal(10, 2)  @default(0.0)
  amount_donated_FY19                   Decimal   @db.Decimal(10, 2)  @default(0.0)
  amount_donated_FY18                   Decimal   @db.Decimal(10, 2)  @default(0.0)
  lifetime_donations_included_pledged   Decimal   @db.Decimal(10, 2)  @default(0.0)
  first_donation_date_incl_pledged      DateTime?
  amount_donated_FY21                   Decimal   @db.Decimal(10, 2)  @default(0.0)
  firstdonationamount                   Decimal   @db.Decimal(10, 2)  @default(0.0)
  largestdonationdate                   DateTime?
  amount_donated_FY22                   Decimal   @db.Decimal(10, 2)  @default(0.0)
  amount_Donated_FY23                   Decimal   @db.Decimal(10, 2)  @default(0.0)
  amount_Donated_FY24                   Decimal   @db.Decimal(10, 2)  @default(0.0)
  notes                                 notes[]
  contacts                              contacts[]
  ticketorders                          ticketorders[]
  ticketorderitems                      ticketorderitem[]
  opportunity                           opportunity[]
}

/// customer information
model contacts {
  id                        Int         @id @default(autoincrement())
  is_deleted                Int                                         @default(0)
  account_id                Int         
  account                   accounts    @relation(fields: [account_id], references: [id])
  salutation                String?     @db.VarChar(255)
  firstname                 String?     @db.VarChar(255)
  lastname                  String?     @db.VarChar(255)
  otherstreet               String?     @db.VarChar(255)
  othercity                 String?     @db.VarChar(255)
  otherstate                String?     @db.VarChar(255)
  otherpostalcode           String?     @db.VarChar(255)
  othercountry              String?     @db.VarChar(255)
  mailingstreet             String?     @db.VarChar(255)
  mailingcity               String?     @db.VarChar(255)
  mailingstate              String?     @db.VarChar(255)
  mailingpostalcode         String?     @db.VarChar(255)
  mailingcountry            String?     @db.VarChar(255)
  phone                     String?     @db.VarChar(255)
  fax                       String?     @db.VarChar(255)
  mobilephone               String?     @db.VarChar(255)
  homephone                 String?     @db.VarChar(255)
  otherphone                String?     @db.VarChar(255)
  email                     String?     @db.VarChar(255)
  title                     String?     @db.VarChar(255)
  department                String?     @db.VarChar(255)
  birthdate                 DateTime?
  description               String?     @db.VarChar(255)
  hasoptedoutofemail        Int                           @default(0)
  hasoptedoutoffax          Int                           @default(0)
  donnotcall                Int                           @default(0)
  createddate               DateTime?                     @default(now())
  createdbyid               String?    @db.VarChar(255)
  lastmodifieddate          DateTime?
  lastmodifiedbyid          String?    @db.VarChar(255)
  systemmodstamp            DateTime?
  lastactivitydate          DateTime?
  emailbouncereason         String?    @db.VarChar(255)
  emailbouncedate           DateTime?
  pronouns                  String?    @db.VarChar(255)
  genderidentity            String?    @db.VarChar(255) 
  donate_date_entered       DateTime?
  deceased                  Int                           @default(0)
  do_not_mail               Int                           @default(0)
  donor_recognition         String?    @db.VarChar(255)
  formalsalutation          String?    @db.VarChar(255)
  informal_address_name     String?    @db.VarChar(255)
  informal_salutation       String?    @db.VarChar(255)
  volunteer_interests       String?    @db.VarChar(255)
  other_email               String?    @db.VarChar(255)
  company                   String?    @db.VarChar(255)
  middlename                String?    @db.VarChar(255)
  suffix                    String?    @db.VarChar(255)
  contactorigin             String?    @db.VarChar(255)
  emailstatus               emailStatus
  current_season_subscriber Decimal?   @db.Decimal(10, 2)  @default(0.0) 
  email_lists               String?    @db.VarChar(255)
  board_member              Decimal?   @db.Decimal(10, 2)  @default(0.0)
  seating_accomodation      Decimal?   @db.Decimal(10, 2)  @default(0.0)
  reserved_seating          Decimal?   @db.Decimal(10, 2)  @default(0.0)
  attending_next_dinner     Decimal?   @db.Decimal(10, 2)  @default(0.0)
  chocolate_and_card        Decimal?   @db.Decimal(10, 2)  @default(0.0)
  legacy_membership_circle  Decimal?   @db.Decimal(10, 2)  @default(0.0) 
  email_list_notes          String?    @db.VarChar(255)
  donations                 donations[]  
  orders                    orders[] 
  notes                     notes[]
  ticketorders              ticketorders[] 
  ticketorderitems          ticketorderitem[]
  opportunity               opportunity[]
}

/// date is used to store information about specific dates to simplify queries
model date {
  dateid                              Int              @id
  date_actual                         DateTime         @db.Date
  day_name                            String           @db.VarChar(9)
  day_of_week                         Int
  day_of_month                        Int
  day_of_quarter                      Int
  day_of_year                         Int
  week_of_month                       Int
  week_of_year                        Int
  month_actual                        Int
  month_name                          String           @db.VarChar(9)
  quarter                             Int
  year_actual                         Int
  first_day_of_week                   DateTime         @db.Date
  last_day_of_week                    DateTime         @db.Date
  first_day_of_month                  DateTime         @db.Date
  last_day_of_month                   DateTime         @db.Date
  first_day_of_quarter                DateTime         @db.Date
  last_day_of_quarter                 DateTime         @db.Date
  first_day_of_year                   DateTime         @db.Date
  last_day_of_year                    DateTime         @db.Date
  weekend                             Boolean
  discounts_discounts_enddateTodate   discounts[]      @relation("discounts_enddateTodate")
  discounts_discounts_startdateTodate discounts[]      @relation("discounts_startdateTodate")
  donations                           donations[]
  eventinstances                      eventinstances[]
  orders                              orders[]
  seasons_seasons_enddateTodate       seasons[]        @relation("seasons_enddateTodate")
  seasons_seasons_startdateTodate     seasons[]        @relation("seasons_startdateTodate")
  task_task_dateassignedTodate        task[]           @relation("task_dateassignedTodate")
  task_task_datecreatedTodate         task[]           @relation("task_datecreatedTodate")
  task_task_datedueTodate             task[]           @relation("task_datedueTodate")
}

/// discounts are applied to orders and may be limited to specific ticket types, event and/or dates
/// amount is a fixed amount discount, percent is a percentage discount
/// discounts with a percent and amount value will use the percent value capped at the amount value
model discounts {
  discountid                     Int         @id @default(autoincrement())
  code                           String?     @db.VarChar(32)
  amount                         Int?
  percent                        Int?
  startdate                      Int?
  enddate                        Int?
  tickettypeid_fk                Int?
  createdby_fk                   Int?
  usagelimit                     Int?
  min_tickets                    Int?
  min_events                     Int?
  users                          users?      @relation(fields: [createdby_fk], references: [userid], onDelete: NoAction, onUpdate: NoAction)
  date_discounts_enddateTodate   date?       @relation("discounts_enddateTodate", fields: [enddate], references: [dateid], onDelete: NoAction, onUpdate: NoAction)
  date_discounts_startdateTodate date?       @relation("discounts_startdateTodate", fields: [startdate], references: [dateid], onDelete: NoAction, onUpdate: NoAction)
  tickettype                     tickettype? @relation(fields: [tickettypeid_fk], references: [tickettypeid], onDelete: NoAction, onUpdate: NoAction)
  orders                         orders[]
}

/// customer or anonymous donations
/// donations can be one time or recurring, stored in the frequency field
/// payment_intent and refund_intent are stripe payment intent ids
model donations {
  donationid     Int       @id @default(autoincrement())
  contactid_fk   Int?
  isanonymous    Boolean?  @default(false)
  amount         Decimal?  @db.Money
  donorname      String?   @db.VarChar(255)
  frequency      freq?
  comments       String?   @db.VarChar(255)
  payment_intent String?   @db.VarChar(255)
  refund_intent  String?   @db.VarChar(255)
  donationdate   Int?
  date           date?     @relation(fields: [donationdate], references: [dateid], onDelete: NoAction, onUpdate: NoAction)
  contacts       contacts? @relation(fields: [contactid_fk], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "donations_donoid_fkey")
}

/// an event instance is a specific showing of an event
/// tickets are sold for event instances only if the salesstatus is true and the event date is in the future
/// preview events are are pre showings of an event before the event is open to the public
model eventinstances {
  eventinstanceid    Int                  @id @default(autoincrement())
  eventid_fk         Int
  eventdate          Int
  eventtime          DateTime             @db.Timetz(6)
  salestatus         Boolean?
  totalseats         Int?
  availableseats     Int?
  purchaseuri        String?              @db.VarChar(255)
  ispreview          Boolean?             @default(false)
  defaulttickettype  Int?
  tickettype         tickettype?          @relation(fields: [defaulttickettype], references: [tickettypeid], onDelete: NoAction, onUpdate: NoAction)
  date               date                 @relation(fields: [eventdate], references: [dateid], onDelete: NoAction, onUpdate: NoAction)
  events             events               @relation(fields: [eventid_fk], references: [event_id], onDelete: NoAction, onUpdate: NoAction, map: "eventinstances_eventid_fkey")
  eventtickets       eventtickets[]
  ticketrestrictions ticketrestrictions[]
}

/// Owner_id in the original PPH schema pointed to the PPH employee/user 
/// who was associated with maintaining the account. 
model events {
  event_id                        Int   @id    @default(autoincrement())
  owner_id                        Int
  name                            String
  create_date                     DateTime     @default(now()) 
  last_modified_date              DateTime
  active_flag                     Int          @default(0) 
  description                     String?
  detail                          String?
  event_category                  String?
  season                          String?
  performance_date                DateTime
  pre_post_show_email_flag        Float?
  pre_show_email_cutoff_minutes   Float?
  pre_show_email_minutes          Float?
  run_time                        String
  seasontickets                   seasontickets[]
  eventinstances                  eventinstances[]
}

/// event tickets is a ticket that can be purchased for an event instance
/// a ticket is redeemed when it is used to enter an event instance
/// tickets can be donated back to wondertix or refunded
model eventtickets {
  eventticketid      Int             @id(map: "tickets_pkey") @default(autoincrement())
  eventinstanceid_fk Int
  tickettypeid_fk    Int?
  singleticket_fk    Int?
  redeemed           Boolean?        @default(false)
  redeemed_ts        DateTime?       @db.Timetz(6)
  donated            Boolean?        @default(false)
  tickettype         tickettype?     @relation(fields: [tickettypeid_fk], references: [tickettypeid], onDelete: NoAction, onUpdate: NoAction)
  eventinstances     eventinstances  @relation(fields: [eventinstanceid_fk], references: [eventinstanceid], onDelete: NoAction, onUpdate: NoAction, map: "tickets_eventinstanceid_fkey")
  singleticket       singletickets?  @relation(fields: [singleticket_fk], references: [singleticketid], onDelete: SetNull, onUpdate: NoAction)
  seasontickets      seasontickets[]
}

// Note table taken from PPH:
model notes {
  id                Int       @id @default(autoincrement())
  isdeleted         Int       @default(0)
  contactid         Int?
  contact           contacts? @relation(fields: [contactid], references: [id])
  accountid         Int
  account           accounts  @relation(fields: [accountid], references: [id])
  title             String    @db.VarChar(255)
  body              String    @db.VarChar(255)
  createddate       DateTime  @default(now())
  lastmodifieddate  DateTime?
}


/// a line item in a customers order
/// the price is the price of the item at the time of purchase before any discounts are applied
model orderitems {
  orderitemid   Int             @id @default(autoincrement())
  orderid_fk    Int
  price         Decimal?        @db.Money
  orders        orders          @relation(fields: [orderid_fk], references: [orderid], onDelete: Cascade, onUpdate: NoAction, map: "orderitems_orderid_fkey")
  seasontickets seasontickets[]
  singletickets singletickets[]
}

/// a customers order
/// refund and payment intents are the uuids from stripe when a refund or payment is made
model orders {
  orderid           Int          @id @default(autoincrement())
  contactid_fk      Int
  orderdate         Int
  ordertime         DateTime?    @db.Timetz(6)
  discountid_fk     Int?
  payment_intent    String?      @db.VarChar(255)
  checkout_sessions String?      @db.VarChar(255)
  refund_intent     String?      @db.VarChar(255)
  ordertotal        Decimal?     @db.Money
  orderitems        orderitems[]
  contacts          contacts     @relation(fields: [contactid_fk], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "orders_contactid_fkey")
  discounts         discounts?   @relation(fields: [discountid_fk], references: [discountid], onDelete: NoAction, onUpdate: NoAction, map: "orders_discountid_fkey")
  date              date         @relation(fields: [orderdate], references: [dateid], onDelete: NoAction, onUpdate: NoAction)
}

/// provides a way to store reports
model savedreports {
  savedreportid Int     @id @default(autoincrement())
  tablename     String? @db.VarChar(255)
  queryattr     String?
}

/// a season is a collection of events over a period of time (e.g. a summer season)
model seasons {
  seasonid                     Int      @id @default(autoincrement())
  name                         String   @db.VarChar(100)
  startdate                    Int
  enddate                      Int
  imageurl                     String?  @db.VarChar(255)
  /// events                       events[]
  date_seasons_enddateTodate   date     @relation("seasons_enddateTodate", fields: [enddate], references: [dateid], onDelete: NoAction, onUpdate: NoAction)
  date_seasons_startdateTodate date     @relation("seasons_startdateTodate", fields: [startdate], references: [dateid], onDelete: NoAction, onUpdate: NoAction)
}

/// a season ticket is a ticket that is not part of a bulk package of tickets during a season
/// season tickets may be sold before the event is scheduled so the eventid_fk is nullable
/// tickets can be swapped for another event ticket
/// when swapped the old season ticket is marked and the old event ticket is marked as not purcahsed
/// a new season ticket is created for the new event ticket and the orderitem is updated to point to the new season ticket
model seasontickets {
  seasonticketid        Int              @id @default(autoincrement())
  orderitemid_fk        Int
  eventticketid_fk      Int?
  eventid_fk            Int
  seasontickettypeid_fk Int
  ticketwasswapped      Boolean?         @default(false)
  events                events           @relation(fields: [eventid_fk], references: [event_id], onDelete: NoAction, onUpdate: NoAction)
  eventtickets          eventtickets?    @relation(fields: [eventticketid_fk], references: [eventticketid], onDelete: NoAction, onUpdate: NoAction)
  orderitems            orderitems       @relation(fields: [orderitemid_fk], references: [orderitemid], onDelete: NoAction, onUpdate: NoAction)
  seasontickettype      seasontickettype @relation(fields: [seasontickettypeid_fk], references: [seasontickettypeid], onDelete: NoAction, onUpdate: NoAction)
}

/// ticket types for season tickets
model seasontickettype {
  seasontickettypeid Int             @id @default(autoincrement())
  description        String          @db.VarChar(100)
  price              Decimal         @db.Money
  seasontickets      seasontickets[]
}

/// a single ticket is a purchased event instance ticket
/// a single ticket can be swapped for another event instance ticket
/// when swapped, the original single ticket is marked as swapped,
/// the old event ticket is marked as not purchased and a new single ticket is created with the old order item id and new event ticket id
model singletickets {
  singleticketid   Int            @id @default(autoincrement())
  orderitemid_fk   Int
  ticketwasswapped Boolean?       @default(false)
  eventtickets     eventtickets[]
  orderitems       orderitems     @relation(fields: [orderitemid_fk], references: [orderitemid], onDelete: Cascade, onUpdate: NoAction)
}

/// used to create and assign tasks such as a todo-list, memo, investigate and issue, etc.
/// task may relate to a contact, donation, order, user, or other task
model task {
  taskid                        Int         @id @default(autoincrement())
  parentid_fk                   Int?
  assignto_fk                   Int?
  reportto_fk                   Int?
  subject                       String?     @db.VarChar(255)
  description                   String?     @db.VarChar(255)
  status                        state?
  datecreated                   Int?
  dateassigned                  Int?
  datedue                       Int?
  ref_contact                   Int?
  ref_donation                  Int?
  ref_order                     Int?
  ref_user                      Int?
  users_task_assignto_fkTousers users?      @relation("task_assignto_fkTousers", fields: [assignto_fk], references: [userid], onDelete: NoAction, onUpdate: NoAction, map: "task_assign_to_fkey")
  date_task_dateassignedTodate  date?       @relation("task_dateassignedTodate", fields: [dateassigned], references: [dateid], onDelete: NoAction, onUpdate: NoAction)
  date_task_datecreatedTodate   date?       @relation("task_datecreatedTodate", fields: [datecreated], references: [dateid], onDelete: NoAction, onUpdate: NoAction)
  date_task_datedueTodate       date?       @relation("task_datedueTodate", fields: [datedue], references: [dateid], onDelete: NoAction, onUpdate: NoAction)
  task                          task?       @relation("taskTotask", fields: [parentid_fk], references: [taskid], onDelete: NoAction, onUpdate: NoAction, map: "task_parent_id_fkey")
  other_task                    task[]      @relation("taskTotask")
  users_task_reportto_fkTousers users?      @relation("task_reportto_fkTousers", fields: [reportto_fk], references: [userid], onDelete: NoAction, onUpdate: NoAction)
  tasknotes                     tasknotes[]
}

/// contains additional notes for a task that can not fit in the description field
model tasknotes {
  tasknoteid Int     @id @default(autoincrement())
  taskid_fk  Int?
  date       Int?
  notes      String?
  task       task?   @relation(fields: [taskid_fk], references: [taskid], onDelete: NoAction, onUpdate: NoAction)
}

/// ticket restrictions for an event are used to limit the number of tickets that can be sold for a ticket type for an event instance
model ticketrestrictions {
  ticketrestrictionsid Int            @id @default(autoincrement())
  eventinstanceid_fk   Int
  tickettypeid_fk      Int
  ticketlimit          Int
  ticketssold          Int?           @default(0)
  eventinstances       eventinstances @relation(fields: [eventinstanceid_fk], references: [eventinstanceid], onDelete: NoAction, onUpdate: NoAction)
  tickettype           tickettype     @relation(fields: [tickettypeid_fk], references: [tickettypeid], onDelete: NoAction, onUpdate: NoAction)
}

/// types of tickets that can be assigned to an event
model tickettype {
  tickettypeid       Int                  @id @default(autoincrement())
  description        String               @db.VarChar(100)
  price              Decimal              @db.Money
  concessions        Decimal              @db.Money
  deprecated         Boolean?             @default(false)
  discounts          discounts[]
  eventinstances     eventinstances[]
  eventtickets       eventtickets[]
  ticketrestrictions ticketrestrictions[]
}

/// users have access to the admin area to manage events, tickets, etc
/// only users with the is_superadmin flag can access the reports
model users {
  userid                       Int         @id @default(autoincrement())
  username                     String      @db.VarChar(255)
  is_superadmin                Boolean     @default(false)
  auth0_id                     String?     @db.VarChar(255)
  discounts                    discounts[]
  task_task_assignto_fkTousers task[]      @relation("task_assignto_fkTousers")
  task_task_reportto_fkTousers task[]      @relation("task_reportto_fkTousers")
}

enum freq {
  one_time @map("one-time")
  weekly
  monthly
  yearly
}

enum state {
  not_started
  in_progress
  completed
}

model StripeWebhook {
  id        Int     @id @default(autoincrement())
  eventid   String
  event     String
  livemode  Boolean
  created   Int
  data      String
  object    String
  requestid String
  type      String
}

model Error {
  id        Int    @id @default(autoincrement())
  message   String
  stack     String
  createdAt Int
}


enum patronType {
  Business
  Corporate_Foundation
  Corporation
  Federal_Agency
  Foundation
  Household
  Individual
  Local_Agency
  Nonprofit_Arts
  Nonprofit_Community_Development
  Nonprofit_Education
  Nonprofit_Environment
  Nonprofit_Health_Services
  Nonprofit_Human_Services
  Nonprofit_Public_Policy
  Private_Foundation
  School
  State_Agency
  Partnership
  SoleProprietorship
  Trust
  Estate
  ReligiousInstitution
  University
  Hospital
  Library
  TradeAssociation
  InternationalOrganization
  CommunityGroup
  Club
  Cooperative
  GovernmentBody
  ResearchInstitution
  TradeUnion
  ProfessionalAssociation
  PoliticalParty
  Charity
  PublicInstitution
  Military
  NewsMedia
  EntertainmentIndustry
  StartUp
  MultinationalCorporation
  SmallMediumEnterprise
  MicroEnterprise
  ThinkTank
  CulturalInstitution
  SportsOrganization
  UNKNOWN
}

enum emailStatus {
  Opt_Out
  Bounced
  Collected
  Confirmed_Opt_In
  UNKNOWN
}




model transactions {
  transaction_id                        Int                 @id @default(autoincrement())
  patron_transaction_id                 Int
  ticket_order_id                       Int?
  ticketorders                          ticketorders?        @relation(fields: [ticket_order_id], references: [ticket_order_id])
  item_id                               String?
  ticket_order_item_id                  Int?
  ticketorderitem                       ticketorderitem?     @relation(fields: [ticket_order_item_id], references: [ticket_order_item_id])
  item_type                             transaction_item_type         @default(UNKNOWN)
  item_name                             String
  payment_method                        transaction_payment_method    @default(UNKNOWN)
  status                                transaction_status            @default(UNKNOWN)
  payment_processor                     String?
  exchange_type                         String?
  order_origin                          String?
  entry_method                          String?
  credit_card_entry_method              String?
  credit_card_last_four                 String?
  name_on_card                          String?
  first_name                            String
  last_name                             String
  transaction_date                      DateTime
  create_date                           DateTime                      @default(now())
  quantity                              Decimal   @db.Decimal(10, 2)  @default(0.0)
  buyer_unit_price                      Decimal   @db.Decimal(10, 2)  @default(0.0)
  gross_unit_price                      Decimal   @db.Decimal(10, 2)  @default(0.0)
  buyer_unit_fee                        Decimal   @db.Decimal(10, 2)  @default(0.0)
  patron_tech_unit_fee                  Decimal   @db.Decimal(10, 2)  @default(0.0)
  unit_fee                              Decimal   @db.Decimal(10, 2)  @default(0.0)
  total_item_quantity                   Decimal   @db.Decimal(10, 2)  @default(0.0)
  buyer_fee_line_item_sub_total         Decimal   @db.Decimal(10, 2)  @default(0.0)
  patron_tech_fee_line_item_sub_total   Decimal   @db.Decimal(10, 2)  @default(0.0)
  shipping_fee                          Decimal?  @db.Decimal(10, 2)  @default(0.0)
  exchange_fee                          Decimal?  @db.Decimal(10, 2)  @default(0.0)
  discount_amount                       Decimal?  @db.Decimal(10, 2)  @default(0.0)
  donation_amount                       Decimal?  @db.Decimal(10, 2)  @default(0.0)
  full_buyer_cost                       Decimal   @db.Decimal(10, 2)  @default(0.0)
  full_gross_amount                     Decimal   @db.Decimal(10, 2)  @default(0.0)
  transaction_total                     Decimal   @db.Decimal(10, 2)  @default(0.0)
  amount_tendered                       Decimal?  @db.Decimal(10, 2)  @default(0.0)
}

enum transaction_item_type {
  Subscription
  Subscription_Distribution
  Fulfullment_Item
  Tickets
  Refund
  Exchange_Item
  Fulfillment_Item_Return
  Donation
  UNKNOWN
}

enum transaction_payment_method {
  Cash
  Credit_Card
  Comp
  Exchange
  Third_Party
  Donation
  Check
  In_Kind
  Other
  Stock
  Soft_Credit
  Direct_Deposit
  Group_Sale_Payment
  Gift_Certificate_Credit
  UNKNOWN
}

enum transaction_status {
  Payment_Complete
  Refund
  Exchange
  Refund_Donation
  Partial_Payment
  UNKNOWN
}



model ticketorders {
  ticket_order_id           Int                               @id @default(autoincrement())
  account_id                Int
  account                   accounts                          @relation(fields: [account_id], references: [id])
  contact_id                Int
  contact                   contacts                          @relation(fields: [contact_id], references: [id])
  ticket_order_name         Int
  type                      ticketorder_type                  @default(UNKNOWN)
  order_status              ticketorder_order_status          @default(UNKNOWN)
  subscription_status       ticketorder_subscription_status   @default(UNKNOWN)
  email                     String    
  phone                     String?  
  other_phone               String?   
  street_address            String?   
  city                      String?  
  state                     String?  
  postal_code               String?   
  country                   String?   
  shipping_first_name       String?   
  shipping_last_name        String?   
  shipping_stress_address   String?   
  shipping_city             String?   
  shipping_state            String?  
  shipping_postal_code      String?  
  shipping_country          String?  
  order_origin              ticketorder_order_origin         @default(UNKNOWN)
  order_source              String?
  payment_method            ticketorder_payment_method       @default(UNKNOWN)
  amount_paid               Decimal?   @db.Decimal(10, 2)    @default(0.00)
  fees                      Decimal?   @db.Decimal(10, 2)    @default(0.00)
  exchange_fee              Decimal?   @db.Decimal(10, 2)    @default(0.00)
  donation_id               Int?
  donation_amount           Decimal?   @db.Decimal(10, 2)    @default(0.00)
  delivery_method           String?
  salutation                String?   
  shipping_salutation       String?   
  email_opt_in              Int                              @default(0) 
  anonymous_purchase_flag   Int?
  update_contact_record         Float?  
  send_confirmation_email_flag  Float? 
  request_accommodation     String?
  external_id               String?   
  comments                  String?   
  notes                     String?   
  create_date               DateTime                         @default(now()) 
  last_modified_date        DateTime                         @default(now()) 
  ticketorderitem           ticketorderitem[]
  transactions              transactions[]
}

enum ticketorder_type {
  Tickets
  Tickets_Subscription
  Subscription
  UNKNOWN
}

enum ticketorder_order_status {
  Complete
  Fully_Refunded
  Partially_Paid
  Deleted
  To_Be_Qualified
  Reservation
  Payment_Exception
  Draft
  UNKNOWN
}

enum ticketorder_subscription_status {
  Not_Applicable
  Filled
  Awaiting_Fulfillment
  UNKNOWN
}

enum ticketorder_order_origin {
  Import
  Online
  Walk_up
  Phone
  Imported
  UNKNOWN
}

enum ticketorder_payment_method {
  Third_Party
  Cash
  Credit_Card
  Comp
  Check
  Group_Sale_Payment
  Gift_Certificate_Credit
  UNKNOWN
}




model ticketorderitem {
  ticket_order_item_id       Int        @id @default(autoincrement())
  ticket_order_id            Int
  ticketorder                ticketorders @relation(fields: [ticket_order_id], references: [ticket_order_id])
  account_id                 Int
  account                    accounts    @relation(fields: [account_id], references: [id])
  contact_id                 Int
  contact                    contacts    @relation(fields: [contact_id], references: [id])
  status                     ticketorderitem_status       @default(UNKNOWN)
  season                     String? 
  event_id                   Int?  
  subscription_order_item_id String?  
  price_level_id             Int? 
  quantity                   Float      @default(1.0)    
  ticket_price               Decimal?   @db.Decimal(10, 2)  @default(0.00)  
  unit_price                 Decimal?   @db.Decimal(10, 2)  @default(0.00)
  amount_paid                Decimal?   @db.Decimal(10, 2)  @default(0.00)
  sales_tax                  Decimal?   @db.Decimal(10, 2)  @default(0.00)  
  discount_code_id           String?   
  discount_amount            Decimal?   @db.Decimal(10, 2)  @default(0.00)
  discount_type              String?  
  unit_fee                   Decimal?   @db.Decimal(10, 2)  @default(0.00)  
  ticket_notes               String? 
  barcode                    String?  
  create_date                DateTime   @default(now()) 
  last_modified_date         DateTime
  entry_date                 DateTime? 
  transactions               transactions[]
}

enum ticketorderitem_status {
  Active
  Deleted
  UNKNOWN
}


model recordtype {
  id                  Int      @id   @default(autoincrement())
  name                recordtype_name   @default(UNKNOWN)
  description         String?
  sobject_type        recordtype_sobjecttype   @default(UNKNOWN)
  is_active           Int
  created_date        DateTime   @default(now()) 
  last_modified_date  DateTime
  system_modstamp     DateTime
  is_deleted          Int        @default(0)
  opportunity         opportunity[]
}

enum recordtype_sobjecttype {
  Campaign
  Account
  Opportunity
  Contact
  Question
  Reply
  Idea
  UNKNOWN
}

enum recordtype_name {
  MailChimp
  Salesforce
  Deceased
  SoftCredit
  Pledge
  PledgePayment
  Organization
  InKind
  FundraiserTickets
  RiseShineRegistration
  MatchingDonation
  Household
  Government
  Nonprofit
  Individual
  Foundation
  Business
  PatronContact
  OtherContact
  Donation
  CorporateDonation
  MajorGift
  Grant
  Membership
  PatronTicketDonation
  ToBeQualified
  GroupSalePayment
  GroupSale
  GrantPayment
  InternalIdeasQuestionRecordType
  InternalIdeasReplyRecordType
  InternalIdeasIdeaRecordType
  UNKNOWN
}



/// Once again, owner_id is associated with whoever the employee is who
/// created the account in the accounts table
/// donor_id is also a reference to contacts based on shallow searching of mine 
model opportunity {
  id                        Int       @id  @default(autoincrement())
  is_deleted                Int       @default(0) 
  accountid                 Int
  account                   accounts  @relation(fields: [accountid], references: [id])
  record_type_id            Int
  recordtype                recordtype @relation(fields: [record_type_id], references:[id])
  is_private                Int       @default(0) 
  name                      String
  description               String?
  amount                    Decimal   @db.Decimal(10, 2)  @default(0.00)
  close_date                DateTime
  type                      opportunity_type   @default(UNKNOWN)
  campaign_id               String
  owner_id                  String
  created_date              DateTime  @default(now()) 
  last_modified_date        DateTime
  fiscal_year               Int
  fiscal_quarter            Int
  contactid                 Int
  contacts                  contacts  @relation(fields:[contactid], references:[id])
  is_anonymous              Int
  amount_paid               Decimal   @db.Decimal(10, 2)  @default(0.00)
  dedication_honoree_name   String?
  dedication_type           String?
  donor_id                  String
  fund_type                 opportunity_fundtype   @default(UNKNOWN)
  grant_amount              Decimal   @db.Decimal(10, 2)  @default(0.00)
  payment_type              opportunity_paymenttype   @default(UNKNOWN)
  sub_type                  String?
  fiscal_year_season        String?
  grant_ask_amount          Decimal?   @db.Decimal(10, 2)  @default(0.00)
  appeal                    String?
  tax_deductible_amount     Decimal   @db.Decimal(10, 2)  @default(0.00)
  acknowledged_by_letter    Float
}

enum opportunity_type {
  InKind
  Individual
  Corporate
  SpecialEvent
  FoundationGrant
  SoftCredit
  Board
  MajorEvent
  SpecialProject
  GovernmentLocal
  GovernmentFederal
  GovernmentState
  OtherEvent4720
  Individual4450
  UNKNOWN
}

enum opportunity_paymenttype {
  InKind
  Other
  CreditCardHistorical
  Cash
  Check
  GiftCert
  CreditCard
  Stock
  SoftCredit
  TicketOrderRefund
  DirectDeposit
  UNKNOWN
}

enum opportunity_fundtype {
  GeneralFund
  CapitalCampaign
  EducationFund
  CapitalCampaignBuyTheBuilding
  UNKNOWN
}
