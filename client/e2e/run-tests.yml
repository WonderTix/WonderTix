steps:

  # Build server image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-server'
    waitFor: ['-']
    entrypoint: 'bash'
    args: ['-c', 'docker build -f server/Dockerfile.dev -t $${ARTIFACTS}/server-img-$${ENV}:${SHORT_SHA} server']
    secretEnv:
      - 'ARTIFACTS'
      - 'ENV'

  # Push server image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-server'
    waitFor: ['build-server']
    entrypoint: 'bash'
    args: ['-c', 'docker push $${ARTIFACTS}/server-img-$${ENV}:${SHORT_SHA}']
    secretEnv:
      - 'ARTIFACTS'
      - 'ENV'

  # Deploy server as a test revision (no traffic)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-server'
    waitFor: ['push-server']
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud run deploy wtix-server-$${ENV} \
        --image $${ARTIFACTS}/server-img-$${ENV}:${SHORT_SHA} \
        --revision-suffix ${SHORT_SHA} \
        --region $${REGION} \
        --platform managed \
        --memory $${SERVER_MEMORY} \
        --cpu $${SERVER_CPU} \
        --cpu-boost \
        --allow-unauthenticated \
        --min-instances 1 \
        --max-instances 10 \
        --no-traffic \
        --tag test \
        --set-cloudsql-instances $${SQL_INSTANCE} \
        --service-account $${SERVICE_ACCOUNT} \
        --set-env-vars=\
        AUTH0_AUDIENCE=$${SERVER_REVISION},\
        AUTH0_URL=$${AUTH0_URL},\
        ENV=$${ENV},\
        FRONTEND_URL=$${CLIENT_REVISION},\
        ROOT_URL=$${SERVER_REVISION}, \
        --set-secrets=\
        AUTH0_CLIENT_SECRET=AUTH0_CLIENT_SECRET:$${ENV},\
        DATABASE_URL=DATABASE_URL:$${ENV},\
        DB_DATABASE=DB_DATABASE:$${ENV},\
        DB_HOST=DB_HOST:$${ENV},\
        DB_PASSWORD=DB_PASSWORD:$${ENV},\
        DB_PORT=DB_PORT:$${ENV},\
        DB_USER=DB_USER:$${ENV},\
        PRIVATE_STRIPE_KEY=PRIVATE_STRIPE_KEY:$${ENV},\
    secretEnv:
      - 'ARTIFACTS'
      - 'AUTH0_URL'
      - 'CLIENT_REVISION'
      - 'ENV'
      - 'REGION'
      - 'SERVER_CPU'
      - 'SERVER_MEMORY'
      - 'SERVER_REVISION'
      - 'SERVICE_ACCOUNT'
      - 'SQL_INSTANCE'

  # Build client image and pass in arguments needed by React at build time
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-client'
    waitFor: ['-']
    entrypoint: 'bash'
    args: 
      - '-c'
      - |
        docker build -f client/Dockerfile.dev -t $${ARTIFACTS}/client-img-$${ENV}:${SHORT_SHA} client \
        --build-arg AUTH0_CLIENT_SECRET=$${AUTH0_CLIENT_SECRET} \
        --build-arg REACT_APP_API_1_URL=$${SERVER_REVISION}/api/1 \
        --build-arg REACT_APP_API_2_URL=$${SERVER_REVISION}/api/2 \
        --build-arg REACT_APP_AUTH0_AUDIENCE=$${SERVER_REVISION} \
        --build-arg REACT_APP_AUTH0_CLIENT_ID=$${AUTH0_CLIENT_ID} \
        --build-arg REACT_APP_AUTH0_URL=$${AUTH0_URL} \
        --build-arg REACT_APP_PUBLIC_STRIPE_KEY=$${PUBLIC_STRIPE_KEY} \
        --build-arg REACT_APP_ROOT_URL=$${SERVER_REVISION}
    secretEnv:
      - 'ARTIFACTS'
      - 'AUTH0_CLIENT_ID'
      - 'AUTH0_CLIENT_SECRET'
      - 'AUTH0_URL'
      - 'ENV'
      - 'PUBLIC_STRIPE_KEY'
      - 'SERVER_REVISION'

  # Push client image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-client'
    waitFor: ['build-client']
    entrypoint: 'bash'
    args: ['-c', 'docker push $${ARTIFACTS}/client-img-$${ENV}:${SHORT_SHA}']
    secretEnv: 
      - 'ARTIFACTS'
      - 'ENV'

  # Deploy client as test revision (no traffic)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-client'
    waitFor: ['push-client']
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud run deploy wtix-client-$${ENV} \
        --image $${ARTIFACTS}/client-img-$${ENV}:${SHORT_SHA} \
        --revision-suffix ${SHORT_SHA} \
        --region $${REGION} \
        --platform managed \
        --memory $${CLIENT_MEMORY} \
        --cpu $${CLIENT_CPU} \
        --cpu-boost \
        --allow-unauthenticated \
        --min-instances 1 \
        --max-instances 10 \
        --no-traffic \
        --tag test \
        --service-account $${SERVICE_ACCOUNT} \
        --set-env-vars=\
        ENV=$${ENV}, \
        --set-secrets=\
        REACT_APP_AUTH1_CLIENT_ID=AUTH0_CLIENT_ID:$${ENV},\
        REACT_APP_PUBLIC_STRIPE_KEY=PUBLIC_STRIPE_KEY:$${ENV}
    secretEnv:
      - 'ARTIFACTS'
      - 'CLIENT_CPU'
      - 'CLIENT_MEMORY'
      - 'ENV'
      - 'REGION'
      - 'SERVICE_ACCOUNT'

  # Wake up client before running tests
  - name: 'mcr.microsoft.com/playwright:latest'
    id: 'wake-client'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        npm install playwright
        export NODE_PATH=$$(pwd)/node_modules
        node client/wake-client.js $${CLIENT_REVISION}
    secretEnv:
      - 'CLIENT_REVISION'

  # Run E2E tests on new client
  - name: 'mcr.microsoft.com/playwright:latest'
    id: 'run-tests'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        export ROOT_URL=$${SERVER_REVISION}
        export FRONTEND_URL=$${CLIENT_REVISION}

        cd client/e2e
        npm install

        if ! npm run test:playwright; then
          echo "Tests failed."
          exit 1
        fi

        echo "All tests passed."
    secretEnv:
      - 'CLIENT_REVISION'
      - 'SERVER_REVISION'
      - 'TEST_EMAIL'
      - 'TEST_PASSWORD'
  
  # Run regular deployment triggers if all tests pass
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-all'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud builds triggers run wtix-server-$${ENV}
        --substitutions=_ENV=$${ENV}

        gcloud builds triggers run wtix-client-$${ENV}
        --substitutions=_ENV=$${ENV}
    secretEnv:
      - 'ENV'

# Use dev, stg, or prd versions depending on $_ENV value from trigger
availableSecrets:
  secretManager:
  - versionName: projects/${PROJECT_ID}/secrets/ARTIFACTS/versions/${_ENV}
    env: 'ARTIFACTS'
  - versionName: projects/${PROJECT_ID}/secrets/AUTH0_CLIENT_ID/versions/${_ENV}
    env: 'AUTH0_CLIENT_ID'
  - versionName: projects/${PROJECT_ID}/secrets/AUTH0_CLIENT_SECRET/versions/${_ENV}
    env: 'AUTH0_CLIENT_SECRET'
  - versionName: projects/${PROJECT_ID}/secrets/AUTH0_URL/versions/${_ENV}
    env: 'AUTH0_URL'
  - versionName: projects/${PROJECT_ID}/secrets/CLIENT_CPU/versions/${_ENV}
    env: 'CLIENT_CPU'
  - versionName: projects/${PROJECT_ID}/secrets/CLIENT_MEMORY/versions/${_ENV}
    env: 'CLIENT_MEMORY'
  - versionName: projects/${PROJECT_ID}/secrets/CLIENT_REVISION/versions/${_ENV}
    env: 'CLIENT_REVISION'
  - versionName: projects/${PROJECT_ID}/secrets/ENV/versions/${_ENV}
    env: 'ENV'
  - versionName: projects/${PROJECT_ID}/secrets/PUBLIC_STRIPE_KEY/versions/${_ENV}
    env: 'PUBLIC_STRIPE_KEY'
  - versionName: projects/${PROJECT_ID}/secrets/REGION/versions/${_ENV}
    env: 'REGION'
  - versionName: projects/${PROJECT_ID}/secrets/SERVER_CPU/versions/${_ENV}
    env: 'SERVER_CPU'
  - versionName: projects/${PROJECT_ID}/secrets/SERVER_MEMORY/versions/${_ENV}
    env: 'SERVER_MEMORY'
  - versionName: projects/${PROJECT_ID}/secrets/SERVER_REVISION/versions/${_ENV}
    env: 'SERVER_REVISION'
  - versionName: projects/${PROJECT_ID}/secrets/SERVICE_ACCOUNT/versions/${_ENV}
    env: 'SERVICE_ACCOUNT'
  - versionName: projects/${PROJECT_ID}/secrets/SQL_INSTANCE/versions/${_ENV}
    env: 'SQL_INSTANCE'
  - versionName: projects/${PROJECT_ID}/secrets/TEST_EMAIL/versions/${_ENV}
    env: 'TEST_EMAIL'
  - versionName: projects/${PROJECT_ID}/secrets/TEST_PASSWORD/versions/${_ENV}
    env: 'TEST_PASSWORD'
