steps:

  # Download node_modules from GCS bucket
  - name: 'gcr.io/cloud-builders/gsutil'
    id: 'pull-npm-cache'
    waitFor: ['-']
    entrypoint: 'bash'
    args: ['gcp/scripts/pull-npm-cache.sh']
    secretEnv:
      - 'CHECK_ARGS'
      - 'ENV'
      - 'NPM_CACHE'

  # Decompress and unarchive node_modules tarball
  - name: 'ubuntu'
    id: 'expand-npm-cache'
    waitFor: ['pull-npm-cache']
    dir: 'client'
    args: ['tar', 'xzf', 'node_modules.tar.gz']

  # Run npm install if cache is not up-to-date
  - name: 'gcr.io/cloud-builders/npm'
    id: 'npm-install-client'
    waitFor: ['expand-npm-cache']
    dir: 'client'
    entrypoint: 'bash'
    args: ['/workspace/gcp/scripts/install-client.sh']
    env:
      - 'CACHE=cache-package.json'
      - 'CURRENT=package.json'
    secretEnv:
      - 'CHECK_ARGS'

  # Pull Playwright image and cache for testing steps
  - name: 'gcr.io/cloud-builders/docker'
    id: 'pull-playwright'
    waitFor: ['-']
    args: ['pull', 'mcr.microsoft.com/playwright:v1.36.2-jammy']
 
  # Build server image
  - name: '${_KANIKO_IMAGE}'
    id: 'build-test-server'
    waitFor: ['-']
    entrypoint: 'bash'
    args: ['gcp/scripts/build-server.sh']
    env:
      - 'SHORT_SHA=${SHORT_SHA}'
    secretEnv:
      - 'ARTIFACTS'
      - 'CHECK_ARGS'
      - 'ENV'
      - 'KANIKO_CACHE'

  # Deploy server as test revision (no traffic)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-test-server'
    waitFor: ['build-test-server']
    entrypoint: 'bash'
    args: ['gcp/scripts/deploy-server.sh']
    env:
      - 'SHORT_SHA=${SHORT_SHA}'
      - 'TAG=test'
    secretEnv:
      - 'ARTIFACTS'
      - 'AUTH0_URL'
      - 'CHECK_ARGS'
      - 'CLIENT_REVISION'
      - 'ENV'
      - 'REGION'
      - 'SERVER_CPU'
      - 'SERVER_MEMORY'
      - 'SERVER_REVISION'
      - 'SERVICE_ACCOUNT'
      - 'SHOULD_SEED'
      - 'GCLOUD_KEY_PATH'
      - 'GCLOUD_BUCKET'
      - 'SQL_INSTANCE'

  # Build client image with args for test revision
  - name: '${_KANIKO_IMAGE}'
    id: 'build-test-client'
    waitFor: ['-']
    entrypoint: 'bash'
    args: ['gcp/scripts/build-client.sh']
    env:
      - 'SHORT_SHA=${SHORT_SHA}'
    secretEnv:
      - 'ARTIFACTS'
      - 'AUTH0_CLIENT_ID'
      - 'AUTH0_URL'
      - 'CHECK_ARGS'
      - 'ENV'
      - 'KANIKO_CACHE'
      - 'PUBLIC_STRIPE_KEY'
      - 'SERVER_REVISION'

  # Deploy client as test revision (no traffic)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-test-client'
    waitFor: ['build-test-server', 'build-test-client']
    entrypoint: 'bash'
    args: ['gcp/scripts/deploy-client.sh']
    env:
      - 'SHORT_SHA=${SHORT_SHA}'
      - 'TAG=test'
    secretEnv:
      - 'ARTIFACTS'
      - 'CHECK_ARGS'
      - 'CLIENT_CPU'
      - 'CLIENT_MEMORY'
      - 'ENV'
      - 'REGION'
      - 'SERVICE_ACCOUNT'

  # Run Firefox E2E tests on test client
  - name: 'mcr.microsoft.com/playwright:v1.36.2-jammy'
    id: 'firefox-tests'
    waitFor: ['npm-install-client', 'deploy-test-client']
    dir: 'client/e2e'
    entrypoint: 'bash'
    args: ['/workspace/gcp/scripts/test-client.sh']
    env:
      - 'BROWSER=firefox'
      - 'CONFIG=/workspace/client/playwright.config.ts'
    secretEnv:
      - 'CHECK_ARGS'
      - 'CLIENT_REVISION'
      - 'SERVER_REVISION'
      - 'TEST_EMAIL'
      - 'TEST_PASSWORD'

  # Run Chromium E2E tests on test client
  - name: 'mcr.microsoft.com/playwright:v1.36.2-jammy'
    id: 'chromium-tests'
    waitFor: ['npm-install-client', 'deploy-test-client']
    dir: 'client/e2e'
    entrypoint: 'bash'
    args: ['/workspace/gcp/scripts/test-client.sh']
    env:
      - 'BROWSER=chromium'
      - 'CONFIG=/workspace/client/playwright.config.ts'
    secretEnv:
      - 'CHECK_ARGS'
      - 'CLIENT_REVISION'
      - 'SERVER_REVISION'
      - 'TEST_EMAIL'
      - 'TEST_PASSWORD'

  # Run WebKit E2E tests on test client
  - name: 'mcr.microsoft.com/playwright:v1.36.2-jammy'
    id: 'webkit-tests'
    waitFor: ['npm-install-client', 'deploy-test-client']
    dir: 'client/e2e'
    entrypoint: 'bash'
    args: ['/workspace/gcp/scripts/test-client.sh']
    env:
      - 'BROWSER=webkit'
      - 'CONFIG=/workspace/client/playwright.config.ts'
    secretEnv:
      - 'CHECK_ARGS'
      - 'CLIENT_REVISION'
      - 'SERVER_REVISION'
      - 'TEST_EMAIL'
      - 'TEST_PASSWORD'

  # Deploy server to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-server'
    waitFor: ['firefox-tests', 'chromium-tests', 'webkit-tests']
    entrypoint: 'bash'
    args: ['gcp/scripts/deploy-server.sh']
    env:
      - 'SHORT_SHA=${SHORT_SHA}'
    secretEnv:
      - 'ARTIFACTS'
      - 'AUTH0_URL'
      - 'CHECK_ARGS'
      - 'ENV'
      - 'FRONTEND_URL'
      - 'REGION'
      - 'ROOT_URL'
      - 'SERVER_CPU'
      - 'SERVER_MEMORY'
      - 'SERVICE_ACCOUNT'
      - 'SHOULD_SEED'
      - 'GCLOUD_KEY_PATH'
      - 'GCLOUD_BUCKET'
      - 'SQL_INSTANCE'

  # Send traffic to new server
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'send-server-traffic'
    waitFor: ['deploy-server']
    entrypoint: 'bash'
    args: ['gcp/scripts/send-traffic.sh']
    env:
      - 'IMAGE=server'
      - 'PERCENTAGE=100'
      - 'SHORT_SHA=${SHORT_SHA}'
    secretEnv:
      - 'CHECK_ARGS'
      - 'ENV'
      - 'REGION'

  # Delete server test revision
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'delete-test-server'
    waitFor: ['send-server-traffic']
    entrypoint: 'bash'
    args: ['gcp/scripts/delete-revision.sh']
    env:
      - 'IMAGE=server'
      - 'SHORT_SHA=${SHORT_SHA}'
      - 'SUFFIX=test'
    secretEnv:
      - 'CHECK_ARGS'
      - 'ENV'
      - 'REGION'
 
  # Build client image using normal args
  - name: '${_KANIKO_IMAGE}'
    id: 'build-client'
    waitFor: ['firefox-tests', 'chromium-tests', 'webkit-tests']
    entrypoint: 'bash'
    args: ['gcp/scripts/build-client.sh']
    env:
      - 'SHORT_SHA=${SHORT_SHA}'
    secretEnv:
      - 'ARTIFACTS'
      - 'AUTH0_CLIENT_ID'
      - 'AUTH0_URL'
      - 'CHECK_ARGS'
      - 'ENV'
      - 'KANIKO_CACHE'
      - 'PUBLIC_STRIPE_KEY'
      - 'ROOT_URL'

  # Deploy client to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-client'
    waitFor: ['build-client', 'send-server-traffic']
    entrypoint: 'bash'
    args: ['gcp/scripts/deploy-client.sh']
    env:
      - 'SHORT_SHA=${SHORT_SHA}'
    secretEnv:
      - 'ARTIFACTS'
      - 'CHECK_ARGS'
      - 'CLIENT_CPU'
      - 'CLIENT_MEMORY'
      - 'ENV'
      - 'REGION'
      - 'SERVICE_ACCOUNT'

  # Send traffic to new client
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'send-client-traffic'
    waitFor: ['deploy-client']
    entrypoint: 'bash'
    args: ['gcp/scripts/send-traffic.sh']
    env:
      - 'IMAGE=client'
      - 'PERCENTAGE=100'
      - 'SHORT_SHA=${SHORT_SHA}'
    secretEnv:
      - 'CHECK_ARGS'
      - 'ENV'
      - 'REGION'

  # Delete client test revision
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'delete-test-client'
    waitFor: ['send-client-traffic']
    entrypoint: 'bash'
    args: ['gcp/scripts/delete-revision.sh']
    env:
      - 'IMAGE=client'
      - 'SHORT_SHA=${SHORT_SHA}'
      - 'SUFFIX=test'
    secretEnv:
      - 'CHECK_ARGS'
      - 'ENV'
      - 'REGION'

  # Update cache in GCS if node_modules have changed
  - name: 'gcr.io/cloud-builders/gsutil'
    id: 'update-npm-cache'
    waitFor: ['firefox-tests', 'chromium-tests', 'webkit-tests']
    dir: 'client'
    entrypoint: 'bash'
    args: ['/workspace/gcp/scripts/push-npm-cache.sh']
    env:
      - 'CACHE=cache-package.json'
      - 'CURRENT=package.json'
    secretEnv:
      - 'CHECK_ARGS'
      - 'ENV'
      - 'NPM_CACHE'

options:
  machineType: 'E2_HIGHCPU_8'

# Use dev, stg, or prd versions depending on ${_ENV} value from trigger
availableSecrets:
  secretManager:
  - versionName: projects/${PROJECT_ID}/secrets/ARTIFACTS/versions/${_ENV}
    env: 'ARTIFACTS'
  - versionName: projects/${PROJECT_ID}/secrets/AUTH0_CLIENT_ID/versions/${_ENV}
    env: 'AUTH0_CLIENT_ID'
  - versionName: projects/${PROJECT_ID}/secrets/AUTH0_URL/versions/${_ENV}
    env: 'AUTH0_URL'
  - versionName: projects/${PROJECT_ID}/secrets/CHECK_ARGS/versions/${_ENV}
    env: 'CHECK_ARGS'
  - versionName: projects/${PROJECT_ID}/secrets/CLIENT_CPU/versions/${_ENV}
    env: 'CLIENT_CPU'
  - versionName: projects/${PROJECT_ID}/secrets/CLIENT_MEMORY/versions/${_ENV}
    env: 'CLIENT_MEMORY'
  - versionName: projects/${PROJECT_ID}/secrets/CLIENT_REVISION/versions/${_ENV}
    env: 'CLIENT_REVISION'
  - versionName: projects/${PROJECT_ID}/secrets/ENV/versions/${_ENV}
    env: 'ENV'
  - versionName: projects/${PROJECT_ID}/secrets/FRONTEND_URL/versions/${_ENV}
    env: 'FRONTEND_URL'
  - versionName: projects/${PROJECT_ID}/secrets/KANIKO_CACHE/versions/${_ENV}
    env: 'KANIKO_CACHE'
  - versionName: projects/${PROJECT_ID}/secrets/NPM_CACHE/versions/${_ENV}
    env: 'NPM_CACHE'
  - versionName: projects/${PROJECT_ID}/secrets/PUBLIC_STRIPE_KEY/versions/${_ENV}
    env: 'PUBLIC_STRIPE_KEY'
  - versionName: projects/${PROJECT_ID}/secrets/REGION/versions/${_ENV}
    env: 'REGION'
  - versionName: projects/${PROJECT_ID}/secrets/ROOT_URL/versions/${_ENV}
    env: 'ROOT_URL'
  - versionName: projects/${PROJECT_ID}/secrets/SERVER_CPU/versions/${_ENV}
    env: 'SERVER_CPU'
  - versionName: projects/${PROJECT_ID}/secrets/SERVER_MEMORY/versions/${_ENV}
    env: 'SERVER_MEMORY'
  - versionName: projects/${PROJECT_ID}/secrets/SERVER_REVISION/versions/${_ENV}
    env: 'SERVER_REVISION'
  - versionName: projects/${PROJECT_ID}/secrets/SERVICE_ACCOUNT/versions/${_ENV}
    env: 'SERVICE_ACCOUNT'
  - versionName: projects/${PROJECT_ID}/secrets/SHOULD_SEED/versions/${_ENV}
    env: 'SHOULD_SEED'
  - versionName: projects/${PROJECT_ID}/secrets/GCLOUD_KEY_PATH/versions/${_ENV}
    env: 'GCLOUD_KEY_PATH'
  - versionName: projects/${PROJECT_ID}/secrets/GCLOUD_BUCKET/versions/${_ENV}
    env: 'GCLOUD_BUCKET'
  - versionName: projects/${PROJECT_ID}/secrets/SQL_INSTANCE/versions/${_ENV}
    env: 'SQL_INSTANCE'
  - versionName: projects/${PROJECT_ID}/secrets/TEST_EMAIL/versions/${_ENV}
    env: 'TEST_EMAIL'
  - versionName: projects/${PROJECT_ID}/secrets/TEST_PASSWORD/versions/${_ENV}
    env: 'TEST_PASSWORD'
