version: '3'

services:
  database:
    image: postgres
    ports:
      - "5434:5432"
    volumes:
      - db:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_PORT: ${DB_PORT}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  server:
    build:
      context: ./server
    ports:
      - "8000:8000"
    profiles:
      - client_dev
      - full_compose
    environment:
      DB_DATABASE: ${DB_DATABASE}
      DB_HOST: ${DB_HOST_DOCKER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_USER: ${DB_USER}
      DB_PORT: ${DB_PORT}
      PRIVATE_STRIPE_KEY: ${PRIVATE_STRIPE_KEY}
      FRONTEND_URL: ${FRONTEND_URL}
      AUTH0_AUDIENCE: ${AUTH0_AUDIENCE}
      AUTH0_URL: ${AUTH0_URL}
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST_DOCKER}:${DB_PORT}/${DB_DATABASE}?schema=public
    volumes:
      - ./server:/usr/app
      - /usr/app/node_modules
    depends_on:
      database:
        condition: service_healthy

  client:
    build:
      context: ./client
    ports:
      - "3000:3000"
    profiles:
      - server_dev
      - full_compose
    environment:
      REACT_APP_ROOT_URL: ${ROOT_URL}
      REACT_APP_PUBLIC_STRIPE_KEY: ${PUBLIC_STRIPE_KEY}
      REACT_APP_AUTH0_URL: ${AUTH0_URL}
      REACT_APP_AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID}
      REACT_APP_AUTH0_AUDIENCE: ${AUTH0_AUDIENCE}
      REACT_APP_API_1_URL: ${ROOT_URL}/api/1
      REACT_APP_API_2_URL: ${ROOT_URL}/api/2
    volumes:
      - ./client:/usr/app
      - /usr/app/node_modules
    command: npm run start

volumes:
  db:
    driver: local

